[
    {
        "addr": 4202084,
        "funname": "sub_401E64",
        "code": "__int64 __fastcall sub_401E64(const void *a1, unsigned int a2, int a3, __int64 a4)\n{\nint v4; // eax\n__int64 result; // rax\nint v8; // [rsp+2Ch] [rbp-14h]\n\nv8 = 2;\nif ( a3 == 3 )\nv8 = 3;\nif ( a2 <= 0x7F )\n{\nsub_402C8B(a4, v8 + (unsigned __int64)a2);\n}\nelse\n{\nv4 = sub_401D61(a2);\nsub_402C8B(a4, a2 + (__int64)v8 + v4);\n}\nif ( !*(_QWORD *)a4 )\nreturn 1LL;\n*(_BYTE *)(*(_QWORD *)(a4 + 8))++ = a3;\nif ( a3 == 3 )\n{\nsub_401DA5(a2 + 1, a4);\n*(_BYTE *)(*(_QWORD *)(a4 + 8))++ = 0;\n}\nelse\n{\nsub_401DA5(a2, a4);\n}\nif ( !a2\n|| (memcpy(*(void **)(a4 + 8), a1, a2), *(_QWORD *)(a4 + 8) += a2 - 1, *(_QWORD *)(a4 + 8) == *(_QWORD *)(a4 + 16)) )\n{\nresult = 0LL;\n}\nelse\n{\nresult = 4294966528LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4202430,
        "funname": "sub_401FBE",
        "code": "__int64 __fastcall sub_401FBE(signed int a1, __int64 a2)\n{\nunsigned int v2; // eax\n__int64 result; // rax\nchar v4; // [rsp+1Ch] [rbp-14h]\nunsigned int v5; // [rsp+20h] [rbp-10h]\nunsigned int v6; // [rsp+24h] [rbp-Ch]\nint v7; // [rsp+28h] [rbp-8h]\nint i; // [rsp+2Ch] [rbp-4h]\n\nv7 = 1;\nif ( a1 >= 0 )\n{\nv5 = a1;\nv2 = sub_401D61(a1);\n}\nelse\n{\nv7 = -1;\nv5 = ~a1;\nv2 = sub_401D61(~a1);\n}\nv6 = v2;\nif ( !v2 )\nv6 = 1;\nif ( v6 <= 3 && (unsigned __int8)(v5 >> (8 * (v6 - 1))) == 128 )\n++v6;\nif ( (unsigned int)sub_402C8B(a2, v6 + 2LL) )\nreturn 1LL;\n*(_BYTE *)(*(_QWORD *)(a2 + 8))++ = 2;\nsub_401DA5(v6, a2);\nfor ( i = v6; i > 0; --i )\n{\nv4 = v5 >> (8 * (i - 1));\nif ( v7 == 1 )\n**(_BYTE **)(a2 + 8) = v4;\nelse\n**(_BYTE **)(a2 + 8) = ~v4;\nif ( i > 1 )\n++*(_QWORD *)(a2 + 8);\n}\nif ( *(_QWORD *)(a2 + 8) == *(_QWORD *)(a2 + 16) )\nresult = 0LL;\nelse\nresult = 4294966528LL;\nreturn result;\n}"
    },
    {
        "addr": 4202793,
        "funname": "sub_402129",
        "code": "__int64 __fastcall sub_402129(__int64 a1, int a2, __int64 a3)\n{\nint v3; // kr04_4\nint v4; // eax\n__int64 result; // rax\nvoid *src; // [rsp+20h] [rbp-30h]\nsize_t size; // [rsp+30h] [rbp-20h]\nint v9; // [rsp+3Ch] [rbp-14h]\n\nv3 = sub_40A4D9(a1);\nsize = v3 / 8 + 1;\nv9 = 2;\nif ( a2 == 3 )\nv9 = 3;\nif ( size <= 0x7F )\n{\nsub_402C8B(a3, size + v9);\n}\nelse\n{\nv4 = sub_401D61(size);\nsub_402C8B(a3, v9 + size + v4);\n}\nif ( !*(_QWORD *)a3 )\nreturn 1LL;\nsrc = malloc(size);\nif ( (unsigned int)sub_40AF41(a1, src, (unsigned int)(v3 / 8 + 1)) )\nreturn 4294967288LL;\n*(_BYTE *)(*(_QWORD *)(a3 + 8))++ = a2;\nif ( a2 == 3 )\n{\nsub_401DA5(v3 / 8 + 2, a3);\n*(_BYTE *)(*(_QWORD *)(a3 + 8))++ = 0;\n}\nelse\n{\nsub_401DA5(size, a3);\n}\nmemcpy(*(void **)(a3 + 8), src, size);\nfree(src);\n*(_QWORD *)(a3 + 8) += (int)size - 1LL;\nif ( *(_QWORD *)(a3 + 8) == *(_QWORD *)(a3 + 16) )\nresult = 0LL;\nelse\nresult = 4294966528LL;\nreturn result;\n}"
    },
    {
        "addr": 4203246,
        "funname": "sub_4022EE",
        "code": "__int64 __fastcall sub_4022EE(__int64 a1, int a2)\n{\n__int64 v2; // rbx\nint v3; // eax\n__int64 result; // rax\n__int64 v5; // [rsp+10h] [rbp-40h] BYREF\nvoid *dest; // [rsp+18h] [rbp-38h]\nvoid *v7; // [rsp+20h] [rbp-30h]\n__int64 v8; // [rsp+28h] [rbp-28h]\nint v9; // [rsp+3Ch] [rbp-14h]\n\nv9 = 2;\nsub_402D70(&v5);\nif ( a2 == 3 )\n++v9;\nif ( *(_QWORD *)(a1 + 24) <= 0x7FuLL )\n{\nsub_402C8B(&v5, v9 + *(_QWORD *)(a1 + 24));\n}\nelse\n{\nv2 = *(_QWORD *)(a1 + 24) + v9;\nv3 = sub_401D61(*(_QWORD *)(a1 + 24));\nsub_402C8B(&v5, v2 + v3);\n}\nif ( v5 )\n{\n*(_BYTE *)dest = a2;\ndest = (char *)dest + 1;\nif ( a2 == 3 )\n{\nsub_401DA5(*(_QWORD *)(a1 + 24) + 1, (__int64)&v5);\n*(_BYTE *)dest = 0;\ndest = (char *)dest + 1;\n}\nelse\n{\nsub_401DA5(*(_QWORD *)(a1 + 24), (__int64)&v5);\n}\nmemcpy(dest, *(const void **)a1, *(_QWORD *)(a1 + 24));\ndest = (char *)dest + (int)*(_QWORD *)(a1 + 24) - 1;\nif ( dest == v7 )\n{\nfree(*(void **)a1);\n*(_QWORD *)a1 = v5;\n*(_QWORD *)(a1 + 8) = dest;\n*(_QWORD *)(a1 + 16) = v7;\n*(_QWORD *)(a1 + 24) = v8;\nresult = 0LL;\n}\nelse\n{\nsub_402D95(&v5);\nresult = 4294966528LL;\n}\n}\nelse\n{\nsub_402D95(&v5);\nresult = 1LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4203679,
        "funname": "sub_40249F",
        "code": "__int64 sub_40249F(__int64 a1, char a2, int a3, ...)\n{\nchar *v3; // rax\nint v5; // eax\nconst void ***v7; // rax\ngcc_va_list va; // [rsp+10h] [rbp-E0h] BYREF\nconst void **v11; // [rsp+28h] [rbp-C8h]\nint v12; // [rsp+34h] [rbp-BCh]\nunsigned __int64 v13; // [rsp+38h] [rbp-B8h]\n\nva_start(va, a3);\nv13 = 0LL;\nv12 = a3;\nwhile ( v12-- )\n{\nif ( va[0].gp_offset > 0x2F )\n{\nv3 = (char *)va[0].overflow_arg_area;\nva[0].overflow_arg_area = (char *)va[0].overflow_arg_area + 8;\n}\nelse\n{\nv3 = (char *)va[0].reg_save_area + va[0].gp_offset;\nva[0].gp_offset += 8;\n}\nif ( **(_QWORD **)v3 )\nv13 += *(_QWORD *)(*(_QWORD *)v3 + 24LL);\n}\nif ( v13 <= 0x7F )\n{\nif ( (unsigned int)sub_402C8B(a1, v13 + 2) )\nreturn 1LL;\n}\nelse\n{\nv5 = sub_401D61(v13);\nif ( (unsigned int)sub_402C8B(a1, v5 + v13 + 2) )\nreturn 1LL;\n}\n*(_BYTE *)(*(_QWORD *)(a1 + 8))++ = a2;\nsub_401DA5(v13, a1);\nva_end(va);\nva_start(va, a3);\nv12 = a3;\nwhile ( v12-- )\n{\nif ( va[0].gp_offset > 0x2F )\n{\nv7 = (const void ***)va[0].overflow_arg_area;\nva[0].overflow_arg_area = (char *)va[0].overflow_arg_area + 8;\n}\nelse\n{\nv7 = (const void ***)((char *)va[0].reg_save_area + va[0].gp_offset);\nva[0].gp_offset += 8;\n}\nv11 = *v7;\nif ( **v7 )\n{\nmemcpy(*(void **)(a1 + 8), *v11, (size_t)v11[3]);\n*(_QWORD *)(a1 + 8) += (int)v11[3] - 1LL;\nif ( *(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16) )\n++*(_QWORD *)(a1 + 8);\n}\n}\nreturn 0LL;\n}"
    },
    {
        "addr": 4204985,
        "funname": "sub_4029B9",
        "code": "__int64 __fastcall sub_4029B9(signed int *a1, __int64 a2)\n{\n__int64 result; // rax\nunsigned int v3; // [rsp+1Ch] [rbp-4h]\nunsigned int v4; // [rsp+1Ch] [rbp-4h]\nunsigned int v5; // [rsp+1Ch] [rbp-4h]\nunsigned int v6; // [rsp+1Ch] [rbp-4h]\nunsigned int v7; // [rsp+1Ch] [rbp-4h]\nunsigned int v8; // [rsp+1Ch] [rbp-4h]\nunsigned int v9; // [rsp+1Ch] [rbp-4h]\nunsigned int v10; // [rsp+1Ch] [rbp-4h]\nunsigned int v11; // [rsp+1Ch] [rbp-4h]\nunsigned int v12; // [rsp+1Ch] [rbp-4h]\n\nsub_402D70(a2);\nv3 = sub_401FBE(*a1, a2);\nif ( v3 )\nreturn v3;\nv4 = sub_402129((__int64)(a1 + 2), 2, a2);\nif ( v4 )\nreturn v4;\nv5 = sub_402129((__int64)(a1 + 6), 2, a2);\nif ( v5 )\nreturn v5;\nv6 = sub_402129((__int64)(a1 + 10), 2, a2);\nif ( v6 )\nreturn v6;\nv7 = sub_402129((__int64)(a1 + 14), 2, a2);\nif ( v7 )\nreturn v7;\nv8 = sub_402129((__int64)(a1 + 18), 2, a2);\nif ( v8 )\nreturn v8;\nv9 = sub_402129((__int64)(a1 + 22), 2, a2);\nif ( v9 )\nreturn v9;\nv10 = sub_402129((__int64)(a1 + 26), 2, a2);\nif ( v10 )\nreturn v10;\nv11 = sub_402129((__int64)(a1 + 30), 2, a2);\nif ( v11 )\nreturn v11;\nv12 = sub_4022EE(a2, 48);\nif ( v12 )\nresult = v12;\nelse\nresult = 0LL;\nreturn result;\n}"
    },
    {
        "addr": 4206858,
        "funname": "sub_40310A",
        "code": "__int64 __fastcall sub_40310A(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nchar v3[32]; // [rsp+10h] [rbp-50h] BYREF\nchar v4[36]; // [rsp+30h] [rbp-30h] BYREF\nunsigned int v5; // [rsp+54h] [rbp-Ch]\n__int64 v6; // [rsp+58h] [rbp-8h]\n\nv6 = a1 + 256;\nsub_402D70(v4);\nsub_402D70(v3);\nv5 = sub_402129(a2 + 8, 2, (__int64)v4);\nif ( v5\n|| (v5 = sub_402129(a2 + 24, 2, (__int64)v4)) != 0\n|| (v5 = sub_4022EE((__int64)v4, 48)) != 0\n|| (v5 = sub_4022EE((__int64)v4, 3)) != 0\n|| (v5 = sub_4027B8((__int64)v3, &unk_41126A, 9u, 48, 5, &unk_411269, 0LL)) != 0\n|| (v5 = sub_40249F(v6, 48, 2, v3, v4)) != 0 )\n{\nsub_402D95((__int64)v4);\nsub_402D95((__int64)v3);\nresult = v5;\n}\nelse\n{\nsub_402D95((__int64)v4);\nsub_402D95((__int64)v3);\nresult = 0LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4207558,
        "funname": "sub_4033C6",
        "code": "__int64 __fastcall sub_4033C6(__int64 a1, char *a2)\n{\nchar v3; // [rsp+1Dh] [rbp-83h] BYREF\nchar v4; // [rsp+1Eh] [rbp-82h]\n__int64 v5; // [rsp+20h] [rbp-80h] BYREF\nint v6; // [rsp+28h] [rbp-78h]\nint v7; // [rsp+2Ch] [rbp-74h]\nunsigned int v8; // [rsp+30h] [rbp-70h]\nint v9; // [rsp+34h] [rbp-6Ch]\nint v10; // [rsp+38h] [rbp-68h]\nint v11; // [rsp+3Ch] [rbp-64h]\nint v12; // [rsp+40h] [rbp-60h]\nint v13; // [rsp+44h] [rbp-5Ch]\nint v14; // [rsp+48h] [rbp-58h]\nint v15; // [rsp+4Ch] [rbp-54h]\nchar *v16; // [rsp+50h] [rbp-50h]\nchar *v17; // [rsp+58h] [rbp-48h]\nchar *v18; // [rsp+60h] [rbp-40h]\nchar *v19; // [rsp+68h] [rbp-38h]\nchar *v20; // [rsp+70h] [rbp-30h]\nchar *v21; // [rsp+78h] [rbp-28h]\nchar *v22; // [rsp+80h] [rbp-20h]\nchar *v23; // [rsp+88h] [rbp-18h]\nchar *v24; // [rsp+90h] [rbp-10h]\nchar *i; // [rsp+98h] [rbp-8h]\n\nv24 = 0LL;\n*(_WORD *)((char *)&v5 + 1) = 1109;\nBYTE3(v5) = 0;\nv23 = &v3;\nv22 = 0LL;\nv21 = 0LL;\nv20 = 0LL;\nv19 = 0LL;\nv18 = 0LL;\nv17 = 0LL;\nv16 = 0LL;\nv15 = 0;\nv14 = 0;\nv13 = 0;\nv12 = 0;\nv11 = 0;\nv10 = 0;\nv9 = 0;\nv8 = 0;\nv7 = 1;\nv6 = -1;\nHIDWORD(v5) = 0;\nfor ( i = a2; ; ++i )\n{\nif ( v7 == 1 )\n{\nif ( v23 == (char *)&v5 )\nreturn 4294966496LL;\nif ( *i == 61 )\n{\nv7 = -1;\n*v23 = 0;\nv6 = 1;\nHIDWORD(v5) = 0;\n}\nelse if ( *i != 32 )\n{\n*v23++ = *i;\n}\ngoto LABEL_38;\n}\nif ( v6 == 1 )\n{\nv24 = i;\nv6 = -1;\n}\nif ( *i != 59 && *i )\n{\n++HIDWORD(v5);\ngoto LABEL_38;\n}\nv7 = 1;\nif ( v3 == 67 && v4 == 78 )\n{\nv21 = v24;\nv14 = HIDWORD(v5);\n}\nelse if ( v3 != 79 || v4 )\n{\nif ( v3 != 67 || v4 )\n{\nif ( v3 == 79 && v4 == 85 )\n{\nv19 = v24;\nv12 = HIDWORD(v5);\n}\nelse if ( v3 == 83 && v4 == 84 )\n{\nv18 = v24;\nv11 = HIDWORD(v5);\n}\nelse if ( v3 != 76 || v4 )\n{\nif ( v3 == 82 && !v4 )\n{\nv16 = v24;\nv9 = HIDWORD(v5);\n}\n}\nelse\n{\nv17 = v24;\nv10 = HIDWORD(v5);\n}\n}\nelse\n{\nv22 = v24;\nv15 = HIDWORD(v5);\n}\n}\nelse\n{\nv20 = v24;\nv13 = HIDWORD(v5);\n}\nv23 = &v3;\nif ( !*i || !i[1] )\nbreak;\nLABEL_38:\nif ( !*i )\nbreak;\n}\nif ( v22 )\n{\nBYTE3(v5) = 6;\nv8 = sub_403303(a1, (char *)&v5 + 1, 3u, v22, v15, 19);\nif ( v8 )\nreturn v8;\n}\nif ( v18 )\n{\nBYTE3(v5) = 8;\nv8 = sub_403303(a1, (char *)&v5 + 1, 3u, v18, v11, 19);\nif ( v8 )\nreturn v8;\n}\nif ( v17 )\n{\nBYTE3(v5) = 7;\nv8 = sub_403303(a1, (char *)&v5 + 1, 3u, v17, v10, 19);\nif ( v8 )\nreturn v8;\n}\nif ( v20 )\n{\nBYTE3(v5) = 10;\nv8 = sub_403303(a1, (char *)&v5 + 1, 3u, v20, v13, 19);\nif ( v8 )\nreturn v8;\n}\nif ( v19 )\n{\nBYTE3(v5) = 11;\nv8 = sub_403303(a1, (char *)&v5 + 1, 3u, v19, v12, 19);\nif ( v8 )\nreturn v8;\n}\nif ( v21 )\n{\nBYTE3(v5) = 3;\nv8 = sub_403303(a1, (char *)&v5 + 1, 3u, v21, v14, 19);\nif ( v8 )\nreturn v8;\n}\nif ( v16 )\n{\nv8 = sub_403303(a1, &unk_411274, 9u, v16, v9, 22);\nif ( v8 )\nreturn v8;\n}\nif ( (unsigned int)sub_4022EE(a1, 48) )\nreturn v8;\nreturn 0LL;\n}"
    },
    {
        "addr": 4209357,
        "funname": "sub_403ACD",
        "code": "__int64 __fastcall sub_403ACD(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nchar v3[28]; // [rsp+10h] [rbp-30h] BYREF\nunsigned int v4; // [rsp+2Ch] [rbp-14h]\nvoid *v5; // [rsp+30h] [rbp-10h]\nsize_t size; // [rsp+38h] [rbp-8h]\n\nsize = (int)sub_40A56B(a2 + 8);\nsub_4079A8(*(_QWORD *)(a1 + 32), (unsigned int)*(_QWORD *)(a1 + 56), v3);\nv5 = malloc(size);\nif ( !v5 )\nreturn 1LL;\nv4 = sub_408F82(a2, 1LL, 5LL, 20LL, v3, v5);\nif ( v4 )\nreturn v4;\nv4 = sub_401E64(v5, size, 3, a1 + 320);\nif ( v4 )\nresult = v4;\nelse\nresult = sub_4027B8(a1 + 288, &unk_41127E, 9u, 48, 5, &unk_411269, 0LL);\nreturn result;\n}"
    },
    {
        "addr": 4209723,
        "funname": "sub_403C3B",
        "code": "__int64 __fastcall sub_403C3B(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nsigned int v3; // [rsp+18h] [rbp-8h]\nunsigned int v4; // [rsp+1Ch] [rbp-4h]\nunsigned int v5; // [rsp+1Ch] [rbp-4h]\nunsigned int v6; // [rsp+1Ch] [rbp-4h]\nunsigned int v7; // [rsp+1Ch] [rbp-4h]\nunsigned int v8; // [rsp+1Ch] [rbp-4h]\nunsigned int v9; // [rsp+1Ch] [rbp-4h]\nunsigned int v10; // [rsp+1Ch] [rbp-4h]\n\nv4 = sub_401FBE(2, a1 + 64);\nif ( v4 )\nreturn v4;\nv5 = sub_4022EE(a1 + 64, 160);\nif ( v5 )\nreturn v5;\nv3 = sub_403BD7();\nif ( !v3 )\nreturn 1LL;\nv6 = sub_401FBE(v3, a1 + 96);\nif ( v6 )\nreturn v6;\nv7 = sub_4027B8(a1 + 128, &unk_41127E, 9u, 48, 5, &unk_411269, 0LL);\nif ( v7 )\nreturn v7;\nv8 = sub_40249F(a1 + 32, 48, 7, a1 + 64, a1 + 96, a1 + 128, a1 + 160, a1 + 192, a1 + 224, a1 + 256);\nif ( v8 )\nreturn v8;\nv9 = sub_403ACD(a1, a2);\nif ( v9 )\nreturn v9;\nv10 = sub_40249F(a1, 48, 3, a1 + 32, a1 + 288, a1 + 320);\nif ( v10 )\nresult = v10;\nelse\nresult = 0LL;\nreturn result;\n}"
    },
    {
        "addr": 4210317,
        "funname": "sub_403E8D",
        "code": "__int64 __fastcall sub_403E8D(__int64 a1, __int64 a2)\n{\n__int64 result; // rax\nunsigned int v3; // [rsp+1Ch] [rbp-4h]\nunsigned int v4; // [rsp+1Ch] [rbp-4h]\nunsigned int v5; // [rsp+1Ch] [rbp-4h]\nunsigned int v6; // [rsp+1Ch] [rbp-4h]\nunsigned int v7; // [rsp+1Ch] [rbp-4h]\n\nv3 = sub_401FBE(0, a1 + 64);\nif ( v3 )\nreturn v3;\nv4 = sub_401E64(&unk_411269, 0, 160, a1 + 96);\nif ( v4 )\nreturn v4;\nv5 = sub_40249F(a1 + 32, 48, 4, a1 + 64, a1 + 224, a1 + 256, a1 + 96);\nif ( v5 )\nreturn v5;\nv6 = sub_403ACD(a1, a2);\nif ( v6 )\nreturn v6;\nv7 = sub_40249F(a1, 48, 3, a1 + 32, a1 + 288, a1 + 320);\nif ( v7 )\nresult = v7;\nelse\nresult = 0LL;\nreturn result;\n}"
    },
    {
        "addr": 4210998,
        "funname": "sub_404136",
        "code": "_QWORD *__fastcall sub_404136(_QWORD *a1, unsigned __int8 *a2)\n{\n_QWORD *result; // rax\nunsigned __int64 v3; // [rsp+10h] [rbp-B0h]\n__int64 v4; // [rsp+10h] [rbp-B0h]\n__int64 v5; // [rsp+10h] [rbp-B0h]\n__int64 v6; // [rsp+10h] [rbp-B0h]\n__int64 v7; // [rsp+10h] [rbp-B0h]\nunsigned __int64 v8; // [rsp+18h] [rbp-A8h]\n__int64 v9; // [rsp+18h] [rbp-A8h]\n__int64 v10; // [rsp+18h] [rbp-A8h]\n__int64 v11; // [rsp+18h] [rbp-A8h]\n__int64 v12; // [rsp+18h] [rbp-A8h]\nunsigned __int64 v13; // [rsp+20h] [rbp-A0h]\n__int64 v14; // [rsp+20h] [rbp-A0h]\n__int64 v15; // [rsp+20h] [rbp-A0h]\n__int64 v16; // [rsp+20h] [rbp-A0h]\n__int64 v17; // [rsp+20h] [rbp-A0h]\nunsigned __int64 v18; // [rsp+28h] [rbp-98h]\n__int64 v19; // [rsp+28h] [rbp-98h]\n__int64 v20; // [rsp+28h] [rbp-98h]\n__int64 v21; // [rsp+28h] [rbp-98h]\n__int64 v22; // [rsp+28h] [rbp-98h]\nunsigned __int64 v23; // [rsp+30h] [rbp-90h]\n__int64 v24; // [rsp+30h] [rbp-90h]\n__int64 v25; // [rsp+30h] [rbp-90h]\n__int64 v26; // [rsp+30h] [rbp-90h]\n__int64 v27; // [rsp+30h] [rbp-90h]\nunsigned __int64 v28; // [rsp+38h] [rbp-88h]\n__int64 v29; // [rsp+38h] [rbp-88h]\n__int64 v30; // [rsp+38h] [rbp-88h]\n__int64 v31; // [rsp+38h] [rbp-88h]\n__int64 v32; // [rsp+38h] [rbp-88h]\nunsigned __int64 v33; // [rsp+40h] [rbp-80h]\n__int64 v34; // [rsp+40h] [rbp-80h]\n__int64 v35; // [rsp+40h] [rbp-80h]\n__int64 v36; // [rsp+40h] [rbp-80h]\n__int64 v37; // [rsp+40h] [rbp-80h]\nunsigned __int64 v38; // [rsp+48h] [rbp-78h]\n__int64 v39; // [rsp+48h] [rbp-78h]\n__int64 v40; // [rsp+48h] [rbp-78h]\n__int64 v41; // [rsp+48h] [rbp-78h]\n__int64 v42; // [rsp+48h] [rbp-78h]\nunsigned __int64 v43; // [rsp+50h] [rbp-70h]\n__int64 v44; // [rsp+50h] [rbp-70h]\n__int64 v45; // [rsp+50h] [rbp-70h]\n__int64 v46; // [rsp+50h] [rbp-70h]\n__int64 v47; // [rsp+50h] [rbp-70h]\nunsigned __int64 v48; // [rsp+58h] [rbp-68h]\n__int64 v49; // [rsp+58h] [rbp-68h]\n__int64 v50; // [rsp+58h] [rbp-68h]\n__int64 v51; // [rsp+58h] [rbp-68h]\n__int64 v52; // [rsp+58h] [rbp-68h]\nunsigned __int64 v53; // [rsp+60h] [rbp-60h]\n__int64 v54; // [rsp+60h] [rbp-60h]\n__int64 v55; // [rsp+60h] [rbp-60h]\n__int64 v56; // [rsp+60h] [rbp-60h]\n__int64 v57; // [rsp+60h] [rbp-60h]\nunsigned __int64 v58; // [rsp+68h] [rbp-58h]\n__int64 v59; // [rsp+68h] [rbp-58h]\n__int64 v60; // [rsp+68h] [rbp-58h]\n__int64 v61; // [rsp+68h] [rbp-58h]\n__int64 v62; // [rsp+68h] [rbp-58h]\nunsigned __int64 v63; // [rsp+70h] [rbp-50h]\n__int64 v64; // [rsp+70h] [rbp-50h]\n__int64 v65; // [rsp+70h] [rbp-50h]\n__int64 v66; // [rsp+70h] [rbp-50h]\n__int64 v67; // [rsp+70h] [rbp-50h]\nunsigned __int64 v68; // [rsp+78h] [rbp-48h]\n__int64 v69; // [rsp+78h] [rbp-48h]\n__int64 v70; // [rsp+78h] [rbp-48h]\n__int64 v71; // [rsp+78h] [rbp-48h]\nunsigned __int64 v72; // [rsp+80h] [rbp-40h]\n__int64 v73; // [rsp+80h] [rbp-40h]\n__int64 v74; // [rsp+80h] [rbp-40h]\n__int64 v75; // [rsp+80h] [rbp-40h]\nunsigned __int64 v76; // [rsp+88h] [rbp-38h]\n__int64 v77; // [rsp+88h] [rbp-38h]\n__int64 v78; // [rsp+88h] [rbp-38h]\n__int64 v79; // [rsp+88h] [rbp-38h]\nunsigned __int64 v80; // [rsp+98h] [rbp-28h]\nunsigned __int64 v81; // [rsp+98h] [rbp-28h]\nunsigned __int64 v82; // [rsp+98h] [rbp-28h]\nunsigned __int64 v83; // [rsp+98h] [rbp-28h]\nunsigned __int64 v84; // [rsp+98h] [rbp-28h]\nunsigned __int64 v85; // [rsp+98h] [rbp-28h]\nunsigned __int64 v86; // [rsp+98h] [rbp-28h]\nunsigned __int64 v87; // [rsp+98h] [rbp-28h]\nunsigned __int64 v88; // [rsp+98h] [rbp-28h]\nunsigned __int64 v89; // [rsp+98h] [rbp-28h]\nunsigned __int64 v90; // [rsp+98h] [rbp-28h]\n__int64 v91; // [rsp+98h] [rbp-28h]\nunsigned __int64 v92; // [rsp+98h] [rbp-28h]\n__int64 v93; // [rsp+98h] [rbp-28h]\nunsigned __int64 v94; // [rsp+98h] [rbp-28h]\n__int64 v95; // [rsp+98h] [rbp-28h]\nunsigned __int64 v96; // [rsp+98h] [rbp-28h]\n__int64 v97; // [rsp+98h] [rbp-28h]\nunsigned __int64 v98; // [rsp+98h] [rbp-28h]\n__int64 v99; // [rsp+98h] [rbp-28h]\nunsigned __int64 v100; // [rsp+98h] [rbp-28h]\n__int64 v101; // [rsp+98h] [rbp-28h]\nunsigned __int64 v102; // [rsp+98h] [rbp-28h]\n__int64 v103; // [rsp+98h] [rbp-28h]\nunsigned __int64 v104; // [rsp+98h] [rbp-28h]\n__int64 v105; // [rsp+98h] [rbp-28h]\nunsigned __int64 v106; // [rsp+98h] [rbp-28h]\n__int64 v107; // [rsp+98h] [rbp-28h]\nunsigned __int64 v108; // [rsp+98h] [rbp-28h]\n__int64 v109; // [rsp+98h] [rbp-28h]\nunsigned __int64 v110; // [rsp+98h] [rbp-28h]\n__int64 v111; // [rsp+98h] [rbp-28h]\n__int64 v112; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v113; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v114; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v115; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v116; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v117; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v118; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v119; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v120; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v121; // [rsp+A0h] [rbp-20h]\n__int64 v122; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v123; // [rsp+A0h] [rbp-20h]\n__int64 v124; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v125; // [rsp+A0h] [rbp-20h]\n__int64 v126; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v127; // [rsp+A0h] [rbp-20h]\n__int64 v128; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v129; // [rsp+A0h] [rbp-20h]\n__int64 v130; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v131; // [rsp+A0h] [rbp-20h]\n__int64 v132; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v133; // [rsp+A0h] [rbp-20h]\n__int64 v134; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v135; // [rsp+A0h] [rbp-20h]\n__int64 v136; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v137; // [rsp+A0h] [rbp-20h]\n__int64 v138; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v139; // [rsp+A0h] [rbp-20h]\n__int64 v140; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v141; // [rsp+A0h] [rbp-20h]\n__int64 v142; // [rsp+A0h] [rbp-20h]\nunsigned __int64 v143; // [rsp+A0h] [rbp-20h]\n__int64 v144; // [rsp+A0h] [rbp-20h]\n__int64 v145; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v146; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v147; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v148; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v149; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v150; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v151; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v152; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v153; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v154; // [rsp+A8h] [rbp-18h]\n__int64 v155; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v156; // [rsp+A8h] [rbp-18h]\n__int64 v157; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v158; // [rsp+A8h] [rbp-18h]\n__int64 v159; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v160; // [rsp+A8h] [rbp-18h]\n__int64 v161; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v162; // [rsp+A8h] [rbp-18h]\n__int64 v163; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v164; // [rsp+A8h] [rbp-18h]\n__int64 v165; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v166; // [rsp+A8h] [rbp-18h]\n__int64 v167; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v168; // [rsp+A8h] [rbp-18h]\n__int64 v169; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v170; // [rsp+A8h] [rbp-18h]\n__int64 v171; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v172; // [rsp+A8h] [rbp-18h]\n__int64 v173; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v174; // [rsp+A8h] [rbp-18h]\n__int64 v175; // [rsp+A8h] [rbp-18h]\nunsigned __int64 v176; // [rsp+A8h] [rbp-18h]\n__int64 v177; // [rsp+B0h] [rbp-10h]\n__int64 v178; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v179; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v180; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v181; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v182; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v183; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v184; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v185; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v186; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v187; // [rsp+B0h] [rbp-10h]\n__int64 v188; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v189; // [rsp+B0h] [rbp-10h]\n__int64 v190; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v191; // [rsp+B0h] [rbp-10h]\n__int64 v192; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v193; // [rsp+B0h] [rbp-10h]\n__int64 v194; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v195; // [rsp+B0h] [rbp-10h]\n__int64 v196; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v197; // [rsp+B0h] [rbp-10h]\n__int64 v198; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v199; // [rsp+B0h] [rbp-10h]\n__int64 v200; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v201; // [rsp+B0h] [rbp-10h]\n__int64 v202; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v203; // [rsp+B0h] [rbp-10h]\n__int64 v204; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v205; // [rsp+B0h] [rbp-10h]\n__int64 v206; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v207; // [rsp+B0h] [rbp-10h]\n__int64 v208; // [rsp+B0h] [rbp-10h]\nunsigned __int64 v209; // [rsp+B0h] [rbp-10h]\n__int64 v210; // [rsp+B8h] [rbp-8h]\n__int64 v211; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v212; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v213; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v214; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v215; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v216; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v217; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v218; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v219; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v220; // [rsp+B8h] [rbp-8h]\n__int64 v221; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v222; // [rsp+B8h] [rbp-8h]\n__int64 v223; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v224; // [rsp+B8h] [rbp-8h]\n__int64 v225; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v226; // [rsp+B8h] [rbp-8h]\n__int64 v227; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v228; // [rsp+B8h] [rbp-8h]\n__int64 v229; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v230; // [rsp+B8h] [rbp-8h]\n__int64 v231; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v232; // [rsp+B8h] [rbp-8h]\n__int64 v233; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v234; // [rsp+B8h] [rbp-8h]\n__int64 v235; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v236; // [rsp+B8h] [rbp-8h]\n__int64 v237; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v238; // [rsp+B8h] [rbp-8h]\n__int64 v239; // [rsp+B8h] [rbp-8h]\nunsigned __int64 v240; // [rsp+B8h] [rbp-8h]\n__int64 v241; // [rsp+B8h] [rbp-8h]\n\nv3 = ((unsigned __int64)a2[2] << 8) | ((unsigned __int64)a2[1] << 16) | ((unsigned __int64)*a2 << 24) | a2[3];\nv8 = ((unsigned __int64)a2[6] << 8) | ((unsigned __int64)a2[5] << 16) | ((unsigned __int64)a2[4] << 24) | a2[7];\nv13 = ((unsigned __int64)a2[10] << 8) | ((unsigned __int64)a2[9] << 16) | ((unsigned __int64)a2[8] << 24) | a2[11];\nv18 = ((unsigned __int64)a2[14] << 8) | ((unsigned __int64)a2[13] << 16) | ((unsigned __int64)a2[12] << 24) | a2[15];\nv23 = ((unsigned __int64)a2[18] << 8) | ((unsigned __int64)a2[17] << 16) | ((unsigned __int64)a2[16] << 24) | a2[19];\nv28 = ((unsigned __int64)a2[22] << 8) | ((unsigned __int64)a2[21] << 16) | ((unsigned __int64)a2[20] << 24) | a2[23];\nv33 = ((unsigned __int64)a2[26] << 8) | ((unsigned __int64)a2[25] << 16) | ((unsigned __int64)a2[24] << 24) | a2[27];\nv38 = ((unsigned __int64)a2[30] << 8) | ((unsigned __int64)a2[29] << 16) | ((unsigned __int64)a2[28] << 24) | a2[31];\nv43 = ((unsigned __int64)a2[34] << 8) | ((unsigned __int64)a2[33] << 16) | ((unsigned __int64)a2[32] << 24) | a2[35];\nv48 = ((unsigned __int64)a2[38] << 8) | ((unsigned __int64)a2[37] << 16) | ((unsigned __int64)a2[36] << 24) | a2[39];\nv53 = ((unsigned __int64)a2[42] << 8) | ((unsigned __int64)a2[41] << 16) | ((unsigned __int64)a2[40] << 24) | a2[43];\nv58 = ((unsigned __int64)a2[46] << 8) | ((unsigned __int64)a2[45] << 16) | ((unsigned __int64)a2[44] << 24) | a2[47];\nv63 = ((unsigned __int64)a2[50] << 8) | ((unsigned __int64)a2[49] << 16) | ((unsigned __int64)a2[48] << 24) | a2[51];\nv68 = ((unsigned __int64)a2[54] << 8) | ((unsigned __int64)a2[53] << 16) | ((unsigned __int64)a2[52] << 24) | a2[55];\nv72 = ((unsigned __int64)a2[58] << 8) | ((unsigned __int64)a2[57] << 16) | ((unsigned __int64)a2[56] << 24) | a2[59];\nv76 = ((unsigned __int64)a2[62] << 8) | ((unsigned __int64)a2[61] << 16) | ((unsigned __int64)a2[60] << 24) | a2[63];\nv210 = a1[2];\nv177 = a1[3];\nv145 = a1[4];\nv112 = a1[5];\nv80 = v3\n+ (v112 ^ v177 & (v112 ^ v145))\n+ (((unsigned int)v210 >> 27) | (unsigned __int64)(32 * v210))\n+ a1[6]\n+ 1518500249;\nv178 = (v177 << 30) | ((unsigned int)v177 >> 2);\nv113 = v8 + (v145 ^ v210 & (v145 ^ v178)) + (((unsigned int)v80 >> 27) | (32 * v80)) + v112 + 1518500249;\nv211 = (v210 << 30) | ((unsigned int)v210 >> 2);\nv146 = v13 + (v178 ^ v80 & (v178 ^ v211)) + (((unsigned int)v113 >> 27) | (32 * v113)) + v145 + 1518500249;\nv81 = (v80 << 30) | ((unsigned int)v80 >> 2);\nv179 = v18 + (v211 ^ v113 & (v211 ^ v81)) + (((unsigned int)v146 >> 27) | (32 * v146)) + v178 + 1518500249;\nv114 = (v113 << 30) | ((unsigned int)v113 >> 2);\nv212 = v23 + (v81 ^ v146 & (v81 ^ v114)) + (((unsigned int)v179 >> 27) | (32 * v179)) + v211 + 1518500249;\nv147 = (v146 << 30) | ((unsigned int)v146 >> 2);\nv82 = v28 + (v114 ^ v179 & (v114 ^ v147)) + (((unsigned int)v212 >> 27) | (32 * v212)) + v81 + 1518500249;\nv180 = (v179 << 30) | ((unsigned int)v179 >> 2);\nv115 = v33 + (v147 ^ v212 & (v147 ^ v180)) + (((unsigned int)v82 >> 27) | (32 * v82)) + v114 + 1518500249;\nv213 = (v212 << 30) | ((unsigned int)v212 >> 2);\nv148 = v38 + (v180 ^ v82 & (v180 ^ v213)) + (((unsigned int)v115 >> 27) | (32 * v115)) + v147 + 1518500249;\nv83 = (v82 << 30) | ((unsigned int)v82 >> 2);\nv181 = v43 + (v213 ^ v115 & (v213 ^ v83)) + (((unsigned int)v148 >> 27) | (32 * v148)) + v180 + 1518500249;\nv116 = (v115 << 30) | ((unsigned int)v115 >> 2);\nv214 = v48 + (v83 ^ v148 & (v83 ^ v116)) + (((unsigned int)v181 >> 27) | (32 * v181)) + v213 + 1518500249;\nv149 = (v148 << 30) | ((unsigned int)v148 >> 2);\nv84 = v53 + (v116 ^ v181 & (v116 ^ v149)) + (((unsigned int)v214 >> 27) | (32 * v214)) + v83 + 1518500249;\nv182 = (v181 << 30) | ((unsigned int)v181 >> 2);\nv117 = v58 + (v149 ^ v214 & (v149 ^ v182)) + (((unsigned int)v84 >> 27) | (32 * v84)) + v116 + 1518500249;\nv215 = (v214 << 30) | ((unsigned int)v214 >> 2);\nv150 = v63 + (v182 ^ v84 & (v182 ^ v215)) + (((unsigned int)v117 >> 27) | (32 * v117)) + v149 + 1518500249;\nv85 = (v84 << 30) | ((unsigned int)v84 >> 2);\nv183 = v68 + (v215 ^ v117 & (v215 ^ v85)) + (((unsigned int)v150 >> 27) | (32 * v150)) + v182 + 1518500249;\nv118 = (v117 << 30) | ((unsigned int)v117 >> 2);\nv216 = v72 + (v85 ^ v150 & (v85 ^ v118)) + (((unsigned int)v183 >> 27) | (32 * v183)) + v215 + 1518500249;\nv151 = (v150 << 30) | ((unsigned int)v150 >> 2);\nv86 = v76 + (v118 ^ v183 & (v118 ^ v151)) + (((unsigned int)v216 >> 27) | (32 * v216)) + v85 + 1518500249;\nv184 = (v183 << 30) | ((unsigned int)v183 >> 2);\nv4 = (2 * (v13 ^ v43 ^ v68 ^ v3)) | ((v13 ^ v43 ^ v68 ^ v3) >> 31) & 1;\nv119 = (v151 ^ v216 & (v151 ^ v184)) + (((unsigned int)v86 >> 27) | (32 * v86)) + v4 + 1518500249 + v118;\nv217 = (v216 << 30) | ((unsigned int)v216 >> 2);\nv9 = (2 * (v18 ^ v48 ^ v72 ^ v8)) | ((v18 ^ v48 ^ v72 ^ v8) >> 31) & 1;\nv152 = (v184 ^ v86 & (v184 ^ v217)) + (((unsigned int)v119 >> 27) | (32 * v119)) + v9 + 1518500249 + v151;\nv87 = (v86 << 30) | ((unsigned int)v86 >> 2);\nv14 = (2 * (v23 ^ v53 ^ v76 ^ v13)) | ((v23 ^ v53 ^ v76 ^ v13) >> 31) & 1;\nv185 = (v217 ^ v119 & (v217 ^ v87)) + (((unsigned int)v152 >> 27) | (32 * v152)) + v14 + 1518500249 + v184;\nv120 = (v119 << 30) | ((unsigned int)v119 >> 2);\nv19 = (2 * (v28 ^ v58 ^ v4 ^ v18)) | ((v28 ^ v58 ^ v4 ^ v18) >> 31) & 1;\nv218 = (v87 ^ v152 & (v87 ^ v120)) + (((unsigned int)v185 >> 27) | (32 * v185)) + v19 + 1518500249 + v217;\nv153 = (v152 << 30) | ((unsigned int)v152 >> 2);\nv24 = (2 * (v33 ^ v63 ^ v9 ^ v23)) | ((v33 ^ v63 ^ v9 ^ v23) >> 31) & 1;\nv88 = (v120 ^ v153 ^ v185) + (((unsigned int)v218 >> 27) | (32 * v218)) + v24 + 1859775393 + v87;\nv186 = (v185 << 30) | ((unsigned int)v185 >> 2);\nv29 = (2 * (v38 ^ v68 ^ v14 ^ v28)) | ((v38 ^ v68 ^ v14 ^ v28) >> 31) & 1;\nv121 = (v153 ^ v186 ^ v218) + (((unsigned int)v88 >> 27) | (32 * v88)) + v29 + 1859775393 + v120;\nv219 = (v218 << 30) | ((unsigned int)v218 >> 2);\nv34 = (2 * (v43 ^ v72 ^ v19 ^ v33)) | ((v43 ^ v72 ^ v19 ^ v33) >> 31) & 1;\nv154 = (v186 ^ v219 ^ v88) + (((unsigned int)v121 >> 27) | (32 * v121)) + v34 + 1859775393 + v153;\nv89 = (v88 << 30) | ((unsigned int)v88 >> 2);\nv39 = (2 * (v48 ^ v76 ^ v24 ^ v38)) | ((v48 ^ v76 ^ v24 ^ v38) >> 31) & 1;\nv187 = (v219 ^ v89 ^ v121) + (((unsigned int)v154 >> 27) | (32 * v154)) + v39 + 1859775393 + v186;\nv122 = (v121 << 30) | ((unsigned int)v121 >> 2);\nv44 = (2 * (v53 ^ v4 ^ v29 ^ v43)) | ((v53 ^ v4 ^ v29 ^ v43) >> 31) & 1;\nv220 = (v89 ^ v122 ^ v154) + (((unsigned int)v187 >> 27) | (32 * v187)) + v44 + 1859775393 + v219;\nv155 = (v154 << 30) | ((unsigned int)v154 >> 2);\nv49 = (2 * (v58 ^ v9 ^ v34 ^ v48)) | ((v58 ^ v9 ^ v34 ^ v48) >> 31) & 1;\nv90 = (v122 ^ v155 ^ v187) + (((unsigned int)v220 >> 27) | (32 * v220)) + v49 + 1859775393 + v89;\nv188 = (v187 << 30) | ((unsigned int)v187 >> 2);\nv54 = (2 * (v63 ^ v14 ^ v39 ^ v53)) | ((v63 ^ v14 ^ v39 ^ v53) >> 31) & 1;\nv123 = (v155 ^ v188 ^ v220) + (((unsigned int)v90 >> 27) | (32 * v90)) + v54 + 1859775393 + v122;\nv221 = (v220 << 30) | ((unsigned int)v220 >> 2);\nv59 = (2 * (v68 ^ v19 ^ v44 ^ v58)) | ((v68 ^ v19 ^ v44 ^ v58) >> 31) & 1;\nv156 = (v188 ^ v221 ^ v90) + (((unsigned int)v123 >> 27) | (32 * v123)) + v59 + 1859775393 + v155;\nv91 = (v90 << 30) | ((unsigned int)v90 >> 2);\nv64 = (2 * (v72 ^ v24 ^ v49 ^ v63)) | ((v72 ^ v24 ^ v49 ^ v63) >> 31) & 1;\nv189 = (v221 ^ v91 ^ v123) + (((unsigned int)v156 >> 27) | (32 * v156)) + v64 + 1859775393 + v188;\nv124 = (v123 << 30) | ((unsigned int)v123 >> 2);\nv69 = (2 * (v76 ^ v29 ^ v54 ^ v68)) | ((v76 ^ v29 ^ v54 ^ v68) >> 31) & 1;\nv222 = (v91 ^ v124 ^ v156) + (((unsigned int)v189 >> 27) | (32 * v189)) + v69 + 1859775393 + v221;\nv157 = (v156 << 30) | ((unsigned int)v156 >> 2);\nv73 = (2 * (v4 ^ v34 ^ v59 ^ v72)) | ((v4 ^ v34 ^ v59 ^ v72) >> 31) & 1;\nv92 = (v124 ^ v157 ^ v189) + (((unsigned int)v222 >> 27) | (32 * v222)) + v73 + 1859775393 + v91;\nv190 = (v189 << 30) | ((unsigned int)v189 >> 2);\nv77 = (2 * (v9 ^ v39 ^ v64 ^ v76)) | ((v9 ^ v39 ^ v64 ^ v76) >> 31) & 1;\nv125 = (v157 ^ v190 ^ v222) + (((unsigned int)v92 >> 27) | (32 * v92)) + v77 + 1859775393 + v124;\nv223 = (v222 << 30) | ((unsigned int)v222 >> 2);\nv5 = (2 * (v14 ^ v44 ^ v69 ^ v4)) | ((v14 ^ v44 ^ v69 ^ (unsigned __int64)v4) >> 31) & 1;\nv158 = (v190 ^ v223 ^ v92) + (((unsigned int)v125 >> 27) | (32 * v125)) + v5 + 1859775393 + v157;\nv93 = (v92 << 30) | ((unsigned int)v92 >> 2);\nv10 = (2 * (v19 ^ v49 ^ v73 ^ v9)) | ((v19 ^ v49 ^ v73 ^ (unsigned __int64)v9) >> 31) & 1;\nv191 = (v223 ^ v93 ^ v125) + (((unsigned int)v158 >> 27) | (32 * v158)) + v10 + 1859775393 + v190;\nv126 = (v125 << 30) | ((unsigned int)v125 >> 2);\nv15 = (2 * (v24 ^ v54 ^ v77 ^ v14)) | ((v24 ^ v54 ^ v77 ^ (unsigned __int64)v14) >> 31) & 1;\nv224 = (v93 ^ v126 ^ v158) + (((unsigned int)v191 >> 27) | (32 * v191)) + v15 + 1859775393 + v223;\nv159 = (v158 << 30) | ((unsigned int)v158 >> 2);\nv20 = (2 * (v29 ^ v59 ^ v5 ^ v19)) | ((v29 ^ v59 ^ v5 ^ (unsigned __int64)v19) >> 31) & 1;\nv94 = (v126 ^ v159 ^ v191) + (((unsigned int)v224 >> 27) | (32 * v224)) + v20 + 1859775393 + v93;\nv192 = (v191 << 30) | ((unsigned int)v191 >> 2);\nv25 = (2 * (v34 ^ v64 ^ v10 ^ v24)) | ((v34 ^ v64 ^ v10 ^ (unsigned __int64)v24) >> 31) & 1;\nv127 = (v159 ^ v192 ^ v224) + (((unsigned int)v94 >> 27) | (32 * v94)) + v25 + 1859775393 + v126;\nv225 = (v224 << 30) | ((unsigned int)v224 >> 2);\nv30 = (2 * (v39 ^ v69 ^ v15 ^ v29)) | ((v39 ^ v69 ^ v15 ^ (unsigned __int64)v29) >> 31) & 1;\nv160 = (v192 ^ v225 ^ v94) + (((unsigned int)v127 >> 27) | (32 * v127)) + v30 + 1859775393 + v159;\nv95 = (v94 << 30) | ((unsigned int)v94 >> 2);\nv35 = (2 * (v44 ^ v73 ^ v20 ^ v34)) | ((v44 ^ v73 ^ v20 ^ (unsigned __int64)v34) >> 31) & 1;\nv193 = (v225 ^ v95 ^ v127) + (((unsigned int)v160 >> 27) | (32 * v160)) + v35 + 1859775393 + v192;\nv128 = (v127 << 30) | ((unsigned int)v127 >> 2);\nv40 = (2 * (v49 ^ v77 ^ v25 ^ v39)) | ((v49 ^ v77 ^ v25 ^ (unsigned __int64)v39) >> 31) & 1;\nv226 = (v95 ^ v128 ^ v160) + (((unsigned int)v193 >> 27) | (32 * v193)) + v40 + 1859775393 + v225;\nv161 = (v160 << 30) | ((unsigned int)v160 >> 2);\nv45 = (2 * (v54 ^ v5 ^ v30 ^ v44)) | ((v54 ^ v5 ^ v30 ^ (unsigned __int64)v44) >> 31) & 1;\nv96 = v45 + (((unsigned int)v226 >> 27) | (32 * v226)) + (v161 & v193 | v128 & (v161 | v193)) + 2400959708u + v95;\nv194 = (v193 << 30) | ((unsigned int)v193 >> 2);\nv50 = (2 * (v59 ^ v10 ^ v35 ^ v49)) | ((v59 ^ v10 ^ v35 ^ (unsigned __int64)v49) >> 31) & 1;\nv129 = v50 + (((unsigned int)v96 >> 27) | (32 * v96)) + (v194 & v226 | v161 & (v194 | v226)) + 2400959708u + v128;\nv227 = (v226 << 30) | ((unsigned int)v226 >> 2);\nv55 = (2 * (v64 ^ v15 ^ v40 ^ v54)) | ((v64 ^ v15 ^ v40 ^ (unsigned __int64)v54) >> 31) & 1;\nv162 = v55 + (((unsigned int)v129 >> 27) | (32 * v129)) + (v227 & v96 | v194 & (v227 | v96)) + 2400959708u + v161;\nv97 = (v96 << 30) | ((unsigned int)v96 >> 2);\nv60 = (2 * (v69 ^ v20 ^ v45 ^ v59)) | ((v69 ^ v20 ^ v45 ^ (unsigned __int64)v59) >> 31) & 1;\nv195 = v60 + (((unsigned int)v162 >> 27) | (32 * v162)) + (v97 & v129 | v227 & (v97 | v129)) + 2400959708u + v194;\nv130 = (v129 << 30) | ((unsigned int)v129 >> 2);\nv65 = (2 * (v73 ^ v25 ^ v50 ^ v64)) | ((v73 ^ v25 ^ v50 ^ (unsigned __int64)v64) >> 31) & 1;\nv228 = v65 + (((unsigned int)v195 >> 27) | (32 * v195)) + (v130 & v162 | v97 & (v130 | v162)) + 2400959708u + v227;\nv163 = (v162 << 30) | ((unsigned int)v162 >> 2);\nv70 = (2 * (v77 ^ v30 ^ v55 ^ v69)) | ((v77 ^ v30 ^ v55 ^ (unsigned __int64)v69) >> 31) & 1;\nv98 = v70 + (((unsigned int)v228 >> 27) | (32 * v228)) + (v163 & v195 | v130 & (v163 | v195)) + 2400959708u + v97;\nv196 = (v195 << 30) | ((unsigned int)v195 >> 2);\nv74 = (2 * (v5 ^ v35 ^ v60 ^ v73)) | ((v5 ^ v35 ^ v60 ^ (unsigned __int64)v73) >> 31) & 1;\nv131 = v74 + (((unsigned int)v98 >> 27) | (32 * v98)) + (v196 & v228 | v163 & (v196 | v228)) + 2400959708u + v130;\nv229 = (v228 << 30) | ((unsigned int)v228 >> 2);\nv78 = (2 * (v10 ^ v40 ^ v65 ^ v77)) | ((v10 ^ v40 ^ v65 ^ (unsigned __int64)v77) >> 31) & 1;\nv164 = v78 + (((unsigned int)v131 >> 27) | (32 * v131)) + (v229 & v98 | v196 & (v229 | v98)) + 2400959708u + v163;\nv99 = (v98 << 30) | ((unsigned int)v98 >> 2);\nv6 = (2 * (v15 ^ v45 ^ v70 ^ v5)) | ((v15 ^ v45 ^ v70 ^ (unsigned __int64)v5) >> 31) & 1;\nv197 = v6 + (((unsigned int)v164 >> 27) | (32 * v164)) + (v99 & v131 | v229 & (v99 | v131)) + 2400959708u + v196;\nv132 = (v131 << 30) | ((unsigned int)v131 >> 2);\nv11 = (2 * (v20 ^ v50 ^ v74 ^ v10)) | ((v20 ^ v50 ^ v74 ^ (unsigned __int64)v10) >> 31) & 1;\nv230 = v11 + (((unsigned int)v197 >> 27) | (32 * v197)) + (v132 & v164 | v99 & (v132 | v164)) + 2400959708u + v229;\nv165 = (v164 << 30) | ((unsigned int)v164 >> 2);\nv16 = (2 * (v25 ^ v55 ^ v78 ^ v15)) | ((v25 ^ v55 ^ v78 ^ (unsigned __int64)v15) >> 31) & 1;\nv100 = v16 + (((unsigned int)v230 >> 27) | (32 * v230)) + (v165 & v197 | v132 & (v165 | v197)) + 2400959708u + v99;\nv198 = (v197 << 30) | ((unsigned int)v197 >> 2);\nv21 = (2 * (v30 ^ v60 ^ v6 ^ v20)) | ((v30 ^ v60 ^ v6 ^ (unsigned __int64)v20) >> 31) & 1;\nv133 = v21 + (((unsigned int)v100 >> 27) | (32 * v100)) + (v198 & v230 | v165 & (v198 | v230)) + 2400959708u + v132;\nv231 = (v230 << 30) | ((unsigned int)v230 >> 2);\nv26 = (2 * (v35 ^ v65 ^ v11 ^ v25)) | ((v35 ^ v65 ^ v11 ^ (unsigned __int64)v25) >> 31) & 1;\nv166 = v26 + (((unsigned int)v133 >> 27) | (32 * v133)) + (v231 & v100 | v198 & (v231 | v100)) + 2400959708u + v165;\nv101 = (v100 << 30) | ((unsigned int)v100 >> 2);\nv31 = (2 * (v40 ^ v70 ^ v16 ^ v30)) | ((v40 ^ v70 ^ v16 ^ (unsigned __int64)v30) >> 31) & 1;\nv199 = v31 + (((unsigned int)v166 >> 27) | (32 * v166)) + (v101 & v133 | v231 & (v101 | v133)) + 2400959708u + v198;\nv134 = (v133 << 30) | ((unsigned int)v133 >> 2);\nv36 = (2 * (v45 ^ v74 ^ v21 ^ v35)) | ((v45 ^ v74 ^ v21 ^ (unsigned __int64)v35) >> 31) & 1;\nv232 = v36 + (((unsigned int)v199 >> 27) | (32 * v199)) + (v134 & v166 | v101 & (v134 | v166)) + 2400959708u + v231;\nv167 = (v166 << 30) | ((unsigned int)v166 >> 2);\nv41 = (2 * (v50 ^ v78 ^ v26 ^ v40)) | ((v50 ^ v78 ^ v26 ^ (unsigned __int64)v40) >> 31) & 1;\nv102 = v41 + (((unsigned int)v232 >> 27) | (32 * v232)) + (v167 & v199 | v134 & (v167 | v199)) + 2400959708u + v101;\nv200 = (v199 << 30) | ((unsigned int)v199 >> 2);\nv46 = (2 * (v55 ^ v6 ^ v31 ^ v45)) | ((v55 ^ v6 ^ v31 ^ (unsigned __int64)v45) >> 31) & 1;\nv135 = v46 + (((unsigned int)v102 >> 27) | (32 * v102)) + (v200 & v232 | v167 & (v200 | v232)) + 2400959708u + v134;\nv233 = (v232 << 30) | ((unsigned int)v232 >> 2);\nv51 = (2 * (v60 ^ v11 ^ v36 ^ v50)) | ((v60 ^ v11 ^ v36 ^ (unsigned __int64)v50) >> 31) & 1;\nv168 = v51 + (((unsigned int)v135 >> 27) | (32 * v135)) + (v233 & v102 | v200 & (v233 | v102)) + 2400959708u + v167;\nv103 = (v102 << 30) | ((unsigned int)v102 >> 2);\nv56 = (2 * (v65 ^ v16 ^ v41 ^ v55)) | ((v65 ^ v16 ^ v41 ^ (unsigned __int64)v55) >> 31) & 1;\nv201 = v56 + (((unsigned int)v168 >> 27) | (32 * v168)) + (v103 & v135 | v233 & (v103 | v135)) + 2400959708u + v200;\nv136 = (v135 << 30) | ((unsigned int)v135 >> 2);\nv61 = (2 * (v70 ^ v21 ^ v46 ^ v60)) | ((v70 ^ v21 ^ v46 ^ (unsigned __int64)v60) >> 31) & 1;\nv234 = v61 + (((unsigned int)v201 >> 27) | (32 * v201)) + (v136 & v168 | v103 & (v136 | v168)) + 2400959708u + v233;\nv169 = (v168 << 30) | ((unsigned int)v168 >> 2);\nv66 = (2 * (v74 ^ v26 ^ v51 ^ v65)) | ((v74 ^ v26 ^ v51 ^ (unsigned __int64)v65) >> 31) & 1;\nv104 = v66 + (v136 ^ v169 ^ v201) + (((unsigned int)v234 >> 27) | (32 * v234)) + 3395469782u + v103;\nv202 = (v201 << 30) | ((unsigned int)v201 >> 2);\nv71 = (2 * (v78 ^ v31 ^ v56 ^ v70)) | ((v78 ^ v31 ^ v56 ^ (unsigned __int64)v70) >> 31) & 1;\nv137 = v71 + (v169 ^ v202 ^ v234) + (((unsigned int)v104 >> 27) | (32 * v104)) + 3395469782u + v136;\nv235 = (v234 << 30) | ((unsigned int)v234 >> 2);\nv75 = (2 * (v6 ^ v36 ^ v61 ^ v74)) | ((v6 ^ v36 ^ v61 ^ (unsigned __int64)v74) >> 31) & 1;\nv170 = v75 + (v202 ^ v235 ^ v104) + (((unsigned int)v137 >> 27) | (32 * v137)) + 3395469782u + v169;\nv105 = (v104 << 30) | ((unsigned int)v104 >> 2);\nv79 = (2 * (v11 ^ v41 ^ v66 ^ v78)) | ((v11 ^ v41 ^ v66 ^ (unsigned __int64)v78) >> 31) & 1;\nv203 = v79 + (v235 ^ v105 ^ v137) + (((unsigned int)v170 >> 27) | (32 * v170)) + 3395469782u + v202;\nv138 = (v137 << 30) | ((unsigned int)v137 >> 2);\nv7 = (2 * (v16 ^ v46 ^ v71 ^ v6)) | ((v16 ^ v46 ^ v71 ^ (unsigned __int64)v6) >> 31) & 1;\nv236 = v7 + (v105 ^ v138 ^ v170) + (((unsigned int)v203 >> 27) | (32 * v203)) + 3395469782u + v235;\nv171 = (v170 << 30) | ((unsigned int)v170 >> 2);\nv12 = (2 * (v21 ^ v51 ^ v75 ^ v11)) | ((v21 ^ v51 ^ v75 ^ (unsigned __int64)v11) >> 31) & 1;\nv106 = v12 + (v138 ^ v171 ^ v203) + (((unsigned int)v236 >> 27) | (32 * v236)) + 3395469782u + v105;\nv204 = (v203 << 30) | ((unsigned int)v203 >> 2);\nv17 = (2 * (v26 ^ v56 ^ v79 ^ v16)) | ((v26 ^ v56 ^ v79 ^ (unsigned __int64)v16) >> 31) & 1;\nv139 = v17 + (v171 ^ v204 ^ v236) + (((unsigned int)v106 >> 27) | (32 * v106)) + 3395469782u + v138;\nv237 = (v236 << 30) | ((unsigned int)v236 >> 2);\nv22 = (2 * (v31 ^ v61 ^ v7 ^ v21)) | ((v31 ^ v61 ^ v7 ^ (unsigned __int64)v21) >> 31) & 1;\nv172 = v22 + (v204 ^ v237 ^ v106) + (((unsigned int)v139 >> 27) | (32 * v139)) + 3395469782u + v171;\nv107 = (v106 << 30) | ((unsigned int)v106 >> 2);\nv27 = (2 * (v36 ^ v66 ^ v12 ^ v26)) | ((v36 ^ v66 ^ v12 ^ (unsigned __int64)v26) >> 31) & 1;\nv205 = v27 + (v237 ^ v107 ^ v139) + (((unsigned int)v172 >> 27) | (32 * v172)) + 3395469782u + v204;\nv140 = (v139 << 30) | ((unsigned int)v139 >> 2);\nv32 = (2 * (v41 ^ v71 ^ v17 ^ v31)) | ((v41 ^ v71 ^ v17 ^ (unsigned __int64)v31) >> 31) & 1;\nv238 = v32 + (v107 ^ v140 ^ v172) + (((unsigned int)v205 >> 27) | (32 * v205)) + 3395469782u + v237;\nv173 = (v172 << 30) | ((unsigned int)v172 >> 2);\nv37 = (2 * (v46 ^ v75 ^ v22 ^ v36)) | ((v46 ^ v75 ^ v22 ^ (unsigned __int64)v36) >> 31) & 1;\nv108 = v37 + (v140 ^ v173 ^ v205) + (((unsigned int)v238 >> 27) | (32 * v238)) + 3395469782u + v107;\nv206 = (v205 << 30) | ((unsigned int)v205 >> 2);\nv42 = (2 * (v51 ^ v79 ^ v27 ^ v41)) | ((v51 ^ v79 ^ v27 ^ (unsigned __int64)v41) >> 31) & 1;\nv141 = v42 + (v173 ^ v206 ^ v238) + (((unsigned int)v108 >> 27) | (32 * v108)) + 3395469782u + v140;\nv239 = (v238 << 30) | ((unsigned int)v238 >> 2);\nv47 = (2 * (v56 ^ v7 ^ v32 ^ v46)) | ((v56 ^ v7 ^ v32 ^ (unsigned __int64)v46) >> 31) & 1;\nv174 = v47 + (v206 ^ v239 ^ v108) + (((unsigned int)v141 >> 27) | (32 * v141)) + 3395469782u + v173;\nv109 = (v108 << 30) | ((unsigned int)v108 >> 2);\nv52 = (2 * (v61 ^ v12 ^ v37 ^ v51)) | ((v61 ^ v12 ^ v37 ^ (unsigned __int64)v51) >> 31) & 1;\nv207 = v52 + (v239 ^ v109 ^ v141) + (((unsigned int)v174 >> 27) | (32 * v174)) + 3395469782u + v206;\nv142 = (v141 << 30) | ((unsigned int)v141 >> 2);\nv57 = (2 * (v66 ^ v17 ^ v42 ^ v56)) | ((v66 ^ v17 ^ v42 ^ (unsigned __int64)v56) >> 31) & 1;\nv240 = v57 + (v109 ^ v142 ^ v174) + (((unsigned int)v207 >> 27) | (32 * v207)) + 3395469782u + v239;\nv175 = (v174 << 30) | ((unsigned int)v174 >> 2);\nv62 = (2 * (v71 ^ v22 ^ v47 ^ v61)) | ((v71 ^ v22 ^ v47 ^ (unsigned __int64)v61) >> 31) & 1;\nv110 = v62 + (v142 ^ v175 ^ v207) + (((unsigned int)v240 >> 27) | (32 * v240)) + 3395469782u + v109;\nv208 = (v207 << 30) | ((unsigned int)v207 >> 2);\nv67 = (2 * (v75 ^ v27 ^ v52 ^ v66)) | ((v75 ^ v27 ^ v52 ^ (unsigned __int64)v66) >> 31) & 1;\nv143 = v67 + (v175 ^ v208 ^ v240) + (((unsigned int)v110 >> 27) | (32 * v110)) + 3395469782u + v142;\nv241 = (v240 << 30) | ((unsigned int)v240 >> 2);\nv176 = ((2 * (v79 ^ v32 ^ v57 ^ v71)) | ((v79 ^ v32 ^ v57 ^ (unsigned __int64)v71) >> 31) & 1)\n+ (v208 ^ v241 ^ v110)\n+ (((unsigned int)v143 >> 27) | (32 * v143))\n+ 3395469782u\n+ v175;\nv111 = (v110 << 30) | ((unsigned int)v110 >> 2);\nv209 = ((2 * (v7 ^ v37 ^ v62 ^ v75)) | ((v7 ^ v37 ^ v62 ^ (unsigned __int64)v75) >> 31) & 1)\n+ (v241 ^ v111 ^ v143)\n+ (((unsigned int)v176 >> 27) | (32 * v176))\n+ 3395469782u\n+ v208;\nv144 = (v143 << 30) | ((unsigned int)v143 >> 2);\na1[2] += ((2 * (v12 ^ v42 ^ v67 ^ v79)) | ((v12 ^ v42 ^ v67 ^ (unsigned __int64)v79) >> 31) & 1)\n+ (v111 ^ v144 ^ v176)\n+ (((unsigned int)v209 >> 27) | (32 * v209))\n+ 3395469782u\n+ v241;\na1[3] += v209;\na1[4] += (v176 << 30) | ((unsigned int)v176 >> 2);\na1[5] += v144;\nresult = a1;\na1[6] += v111;\nreturn result;\n}"
    },
    {
        "addr": 4224435,
        "funname": "sub_4075B3",
        "code": "unsigned __int64 __fastcall sub_4075B3(unsigned __int8 *a1, unsigned __int8 *a2, int a3)\n{\nunsigned __int64 result; // rax\nint v4; // [rsp+Ch] [rbp-24h]\nunsigned __int8 *src; // [rsp+10h] [rbp-20h]\nint v6; // [rsp+24h] [rbp-Ch]\n__int64 v7; // [rsp+28h] [rbp-8h]\n\nsrc = a2;\nv4 = a3;\nif ( a3 > 0 )\n{\nv7 = *(_QWORD *)a1 & 0x3FLL;\nv6 = 64 - v7;\n*(_QWORD *)a1 += a3;\n*(_QWORD *)a1 = (unsigned int)*(_QWORD *)a1;\nresult = a3;\nif ( *(_QWORD *)a1 < (unsigned __int64)a3 )\n{\nresult = (unsigned __int64)a1;\n++*((_QWORD *)a1 + 1);\n}\nif ( v7 )\n{\nresult = (unsigned int)a3;\nif ( a3 >= v6 )\n{\nmemcpy(&a1[v7 + 56], a2, v6);\nsub_404136(a1, a1 + 56);\nsrc = &a2[v6];\nresult = (unsigned int)v6;\nv4 -= v6;\nv7 = 0LL;\n}\n}\nwhile ( v4 > 63 )\n{\nresult = (unsigned __int64)sub_404136(a1, src);\nsrc += 64;\nv4 -= 64;\n}\nif ( v4 > 0 )\nresult = (unsigned __int64)memcpy(&a1[v7 + 56], src, v4);\n}\nreturn result;\n}"
    },
    {
        "addr": 4224749,
        "funname": "sub_4076ED",
        "code": "_BYTE *__fastcall sub_4076ED(__int64 a1, _BYTE *a2)\n{\n__int64 v2; // rax\n_BYTE *result; // rax\nunsigned __int8 v4[8]; // [rsp+18h] [rbp-28h] BYREF\n__int64 v5; // [rsp+20h] [rbp-20h]\nunsigned __int64 v6; // [rsp+28h] [rbp-18h]\n__int64 v7; // [rsp+30h] [rbp-10h]\n__int64 v8; // [rsp+38h] [rbp-8h]\n\nv8 = (*(_QWORD *)a1 >> 29) | (8LL * *(_QWORD *)(a1 + 8));\nv7 = 8LL * *(_QWORD *)a1;\nv4[0] = BYTE3(v8);\nv4[1] = BYTE2(v8);\nv4[2] = BYTE1(v8);\nv4[3] = v8;\nv4[4] = BYTE3(v7);\nv4[5] = BYTE2(v7);\nv4[6] = BYTE1(v7);\nv4[7] = v7;\nv6 = *(_QWORD *)a1 & 0x3FLL;\nif ( v6 > 0x37 )\nv2 = 120 - v6;\nelse\nv2 = 56 - v6;\nv5 = v2;\nsub_4075B3((unsigned __int8 *)a1, byte_4112A0, v2);\nsub_4075B3((unsigned __int8 *)a1, v4, 8);\n*a2 = BYTE3(*(_QWORD *)(a1 + 16));\na2[1] = BYTE2(*(_QWORD *)(a1 + 16));\na2[2] = BYTE1(*(_QWORD *)(a1 + 16));\na2[3] = *(_QWORD *)(a1 + 16);\na2[4] = BYTE3(*(_QWORD *)(a1 + 24));\na2[5] = BYTE2(*(_QWORD *)(a1 + 24));\na2[6] = BYTE1(*(_QWORD *)(a1 + 24));\na2[7] = *(_QWORD *)(a1 + 24);\na2[8] = BYTE3(*(_QWORD *)(a1 + 32));\na2[9] = BYTE2(*(_QWORD *)(a1 + 32));\na2[10] = BYTE1(*(_QWORD *)(a1 + 32));\na2[11] = *(_QWORD *)(a1 + 32);\na2[12] = BYTE3(*(_QWORD *)(a1 + 40));\na2[13] = BYTE2(*(_QWORD *)(a1 + 40));\na2[14] = BYTE1(*(_QWORD *)(a1 + 40));\na2[15] = *(_QWORD *)(a1 + 40);\na2[16] = BYTE3(*(_QWORD *)(a1 + 48));\na2[17] = BYTE2(*(_QWORD *)(a1 + 48));\na2[18] = BYTE1(*(_QWORD *)(a1 + 48));\nresult = a2 + 19;\na2[19] = *(_QWORD *)(a1 + 48);\nreturn result;\n}"
    },
    {
        "addr": 4225839,
        "funname": "sub_407B2F",
        "code": "void *__fastcall sub_407B2F(_QWORD *a1, unsigned __int8 *a2, int a3)\n{\nint v4; // [rsp+Ch] [rbp-34h]\nchar *v5; // [rsp+10h] [rbp-30h]\nchar s[28]; // [rsp+20h] [rbp-20h] BYREF\nint i; // [rsp+3Ch] [rbp-4h]\n\nv5 = (char *)a2;\nv4 = a3;\nif ( a3 > 64 )\n{\nsub_4079A8(a2, a3, s);\nv4 = 20;\nv5 = s;\n}\nmemset(a1 + 15, 54, 0x40uLL);\nmemset(a1 + 23, 92, 0x40uLL);\nfor ( i = 0; i < v4; ++i )\n{\n*((_BYTE *)a1 + i + 120) ^= v5[i];\n*((_BYTE *)a1 + i + 184) ^= v5[i];\n}\nsub_4040D5(a1);\nsub_4075B3((unsigned __int8 *)a1, (unsigned __int8 *)a1 + 120, 64);\nreturn memset(s, 0, 0x14uLL);\n}"
    },
    {
        "addr": 4227777,
        "funname": "sub_4082C1",
        "code": "__int64 __fastcall sub_4082C1(__int64 a1, int a2, int a3, __int64 a4, __int64 a5, int a6)\n{\nint v7; // er9\nunsigned int v8; // [rsp+0h] [rbp-60h]\nint v9; // [rsp+4h] [rbp-5Ch]\nchar v10[16]; // [rsp+10h] [rbp-50h] BYREF\nchar v11[16]; // [rsp+20h] [rbp-40h] BYREF\nchar v12[16]; // [rsp+30h] [rbp-30h] BYREF\nchar v13[28]; // [rsp+40h] [rbp-20h] BYREF\nint v14; // [rsp+5Ch] [rbp-4h]\n\nif ( !*(_QWORD *)(a1 + 192) || a2 <= 127 || a3 <= 2 )\nreturn 4294966272LL;\nsub_409F81((unsigned int)v13, (unsigned int)v12, (unsigned int)v11, (unsigned int)v10, 0, a6, a3);\nv14 = sub_40A3E1(a1 + 24, v8);\nif ( !v14 )\n{\nwhile ( 1 )\n{\nv14 = sub_410682(a1 + 56, (unsigned int)((v9 + 1) >> 1), 0LL, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));\nif ( v14 )\nbreak;\nv14 = sub_410682(a1 + 72, (unsigned int)((v9 + 1) >> 1), 0LL, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));\nif ( v14 )\nbreak;\nif ( (int)sub_40B49C(a1 + 56, a1 + 72) < 0 )\nsub_40A396(a1 + 56, a1 + 72);\nif ( (unsigned int)sub_40B49C(a1 + 56, a1 + 72) )\n{\nv14 = sub_40E173(a1 + 8, a1 + 56, a1 + 72);\nif ( v14 )\nbreak;\nif ( v9 == (unsigned int)sub_40A4D9(a1 + 8) )\n{\nv14 = sub_40BC71(v13, a1 + 56, 1LL);\nif ( v14 )\nbreak;\nv14 = sub_40BC71(v12, a1 + 72, 1LL);\nif ( v14 )\nbreak;\nv14 = sub_40E173(v11, v13, v12);\nif ( v14 )\nbreak;\nv14 = sub_40F98A(v10, a1 + 24, v11);\nif ( v14 )\nbreak;\n}\n}\nif ( !(unsigned int)sub_40B627(v10, 1LL) )\n{\nv14 = sub_40FBEA(a1 + 40, a1 + 24, v11);\nif ( !v14 )\n{\nv14 = sub_40ED21(a1 + 88, a1 + 40, v13);\nif ( !v14 )\n{\nv14 = sub_40ED21(a1 + 104, a1 + 40, v12);\nif ( !v14 )\n{\nv14 = sub_40FBEA(a1 + 120, a1 + 72, a1 + 56);\nif ( !v14 )\n*(_DWORD *)(a1 + 4) = (int)(sub_40A4D9(a1 + 8) + 7) >> 3;\n}\n}\n}\nbreak;\n}\n}\n}\nsub_40A088((unsigned int)v10, (unsigned int)v11, (unsigned int)v12, (unsigned int)v13, 0, v7, v8);\nif ( !v14 )\nreturn 0LL;\nsub_40949D(a1);\nreturn v14 | 0xFFFFFBE0;\n}"
    },
    {
        "addr": 4228868,
        "funname": "sub_408704",
        "code": "__int64 __fastcall sub_408704(__int64 a1)\n{\n__int64 result; // rax\nchar v2[16]; // [rsp+10h] [rbp-80h] BYREF\nchar v3[16]; // [rsp+20h] [rbp-70h] BYREF\nchar v4[16]; // [rsp+30h] [rbp-60h] BYREF\nchar v5[16]; // [rsp+40h] [rbp-50h] BYREF\nchar v6[16]; // [rsp+50h] [rbp-40h] BYREF\nchar v7[16]; // [rsp+60h] [rbp-30h] BYREF\nchar v8[28]; // [rsp+70h] [rbp-20h] BYREF\nunsigned int v9; // [rsp+8Ch] [rbp-4h]\n\nv9 = sub_408660(a1);\nif ( v9 )\nreturn v9;\nsub_409F81(\n(unsigned int)v8,\n(unsigned int)v7,\n(unsigned int)v6,\n(unsigned int)v5,\n(unsigned int)v4,\n(unsigned int)v3,\nv2,\n0LL);\nv9 = sub_40E173(v8, a1 + 56, a1 + 72);\nif ( v9\n|| (v9 = sub_40E173(v7, a1 + 40, a1 + 24)) != 0\n|| (v9 = sub_40BC71(v6, a1 + 56, 1LL)) != 0\n|| (v9 = sub_40BC71(v5, a1 + 72, 1LL)) != 0\n|| (v9 = sub_40E173(v4, v6, v5)) != 0\n|| (v9 = sub_40ED21(v3, v7, v4)) != 0\n|| (v9 = sub_40F98A(v2, a1 + 24, v4)) != 0\n|| (unsigned int)sub_40B49C(v8, a1 + 8)\n|| (unsigned int)sub_40B627(v3, 1LL)\n|| (unsigned int)sub_40B627(v2, 1LL) )\n{\nsub_40A088(\n(unsigned int)v2,\n(unsigned int)v3,\n(unsigned int)v4,\n(unsigned int)v5,\n(unsigned int)v6,\n(unsigned int)v7,\nv8,\n0LL);\nresult = (unsigned __int16)v9 | 0xFFFFFBD0;\n}\nelse\n{\nsub_40A088(\n(unsigned int)v2,\n(unsigned int)v3,\n(unsigned int)v4,\n(unsigned int)v5,\n(unsigned int)v6,\n(unsigned int)v7,\nv8,\n0LL);\nresult = 0LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4229476,
        "funname": "sub_408964",
        "code": "__int64 __fastcall sub_408964(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\nint v6; // edx\nint v7; // ecx\nint v8; // er8\nint v9; // er9\nint v10; // edx\nint v11; // ecx\nint v12; // er8\nint v13; // er9\n__int64 result; // rax\nchar v16[24]; // [rsp+20h] [rbp-20h] BYREF\nunsigned int v17; // [rsp+38h] [rbp-8h]\nint v18; // [rsp+3Ch] [rbp-4h]\n\nsub_409F81((unsigned int)v16, 0, a3, a4, a5, a6);\nv18 = sub_40AE19(v16, a2, *(unsigned int *)(a1 + 4));\nif ( !v18 )\n{\nif ( (int)sub_40B49C(v16, a1 + 8) >= 0 )\n{\nsub_40A088((unsigned int)v16, 0, v10, v11, v12, v13);\nreturn 4294966272LL;\n}\nv17 = *(_DWORD *)(a1 + 4);\nv18 = sub_40F1CB(v16, v16, a1 + 24, a1 + 8, a1 + 136);\nif ( !v18 )\nv18 = sub_40AF41(v16, a3, v17);\n}\nsub_40A088((unsigned int)v16, 0, v6, v7, v8, v9);\nif ( v18 )\nresult = (unsigned __int16)v18 | 0xFFFFFBC0;\nelse\nresult = 0LL;\nreturn result;\n}"
    },
    {
        "addr": 4229761,
        "funname": "sub_408A81",
        "code": "__int64 __fastcall sub_408A81(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\nint v6; // er8\nint v7; // er9\nint v8; // edx\nint v9; // ecx\nint v10; // er8\nint v11; // er9\n__int64 result; // rax\nchar v14[16]; // [rsp+20h] [rbp-40h] BYREF\nchar v15[16]; // [rsp+30h] [rbp-30h] BYREF\nchar v16[24]; // [rsp+40h] [rbp-20h] BYREF\nunsigned int v17; // [rsp+58h] [rbp-8h]\nint v18; // [rsp+5Ch] [rbp-4h]\n\nsub_409F81((unsigned int)v16, (unsigned int)v15, (unsigned int)v14, 0, a5, a6);\nv18 = sub_40AE19(v16, a2, *(unsigned int *)(a1 + 4));\nif ( !v18 )\n{\nif ( (int)sub_40B49C(v16, a1 + 8) >= 0 )\n{\nsub_40A088((unsigned int)v16, 0, v8, v9, v10, v11);\nreturn 4294966272LL;\n}\nv18 = sub_40F1CB(v15, v16, a1 + 88, a1 + 56, a1 + 152);\nif ( !v18 )\n{\nv18 = sub_40F1CB(v14, v16, a1 + 104, a1 + 72, a1 + 168);\nif ( !v18 )\n{\nv18 = sub_40BB38(v16, v15, v14);\nif ( !v18 )\n{\nv18 = sub_40E173(v15, v16, a1 + 120);\nif ( !v18 )\n{\nv18 = sub_40ED21(v16, v15, a1 + 56);\nif ( !v18 )\n{\nv18 = sub_40E173(v15, v16, a1 + 72);\nif ( !v18 )\n{\nv18 = sub_40BA60(v16, v14, v15);\nif ( !v18 )\n{\nv17 = *(_DWORD *)(a1 + 4);\nv18 = sub_40AF41(v16, a3, v17);\n}\n}\n}\n}\n}\n}\n}\n}\nsub_40A088((unsigned int)v16, (unsigned int)v15, (unsigned int)v14, 0, v6, v7);\nif ( v18 )\nresult = (unsigned __int16)v18 | 0xFFFFFBB0;\nelse\nresult = 0LL;\nreturn result;\n}"
    },
    {
        "addr": 4230323,
        "funname": "sub_408CB3",
        "code": "__int64 __fastcall sub_408CB3(__int64 a1, int a2, int a3, const void *a4, _BYTE *a5)\n{\n__int64 result; // rax\nint v6; // eax\nint v7; // er8\nint v8; // er9\nint v12; // [rsp+2Ch] [rbp-14h]\n_BYTE *dest; // [rsp+30h] [rbp-10h]\nint v14; // [rsp+3Ch] [rbp-4h]\n\nv12 = *(_DWORD *)(a1 + 4);\nif ( *(_DWORD *)(a1 + 184) )\nreturn 4294966256LL;\nif ( a3 < 0 || v12 <= a3 + 10 )\nreturn 4294966272LL;\nv14 = v12 - 3 - a3;\n*a5 = 0;\ndest = a5 + 2;\na5[1] = 2;\nwhile ( 1 )\n{\nv6 = v14--;\nif ( v6 <= 0 )\nbreak;\ndo\n*dest = rand();\nwhile ( !*dest );\n++dest;\n}\n*dest = 0;\nmemcpy(dest + 1, a4, a3);\nif ( a2 )\nresult = sub_408A81(a1, (__int64)a5, (__int64)a5, (__int64)a5, v7, v8);\nelse\nresult = sub_408964(a1, (__int64)a5, (__int64)a5, (int)a5, v7, v8);\nreturn result;\n}"
    },
    {
        "addr": 4230605,
        "funname": "sub_408DCD",
        "code": "__int64 __fastcall sub_408DCD(__int64 a1, int a2, int *a3, __int64 a4, void *a5, int a6)\n{\nunsigned int v7; // eax\n_BYTE *v8; // rax\n_BYTE *v9; // rax\nchar v13[512]; // [rsp+30h] [rbp-210h] BYREF\nunsigned int v14; // [rsp+230h] [rbp-10h]\nint v15; // [rsp+234h] [rbp-Ch]\nvoid *src; // [rsp+238h] [rbp-8h]\n__int64 savedregs; // [rsp+240h] [rbp+0h] BYREF\n\nv15 = *(_DWORD *)(a1 + 4);\nif ( v15 <= 15 || v15 > 512 )\nreturn 4294966272LL;\nif ( a2 )\nv7 = sub_408A81(a1, a4, (__int64)v13, a4, (int)a5, a6);\nelse\nv7 = sub_408964(a1, a4, (__int64)v13, a4, (int)a5, a6);\nv14 = v7;\nif ( v7 )\nreturn v14;\nsrc = v13;\nif ( *(_DWORD *)(a1 + 184) )\nreturn 4294966256LL;\nv8 = src;\nsrc = (char *)src + 1;\nif ( *v8 )\nreturn 4294966256LL;\nv9 = src;\nsrc = (char *)src + 1;\nif ( *v9 != 2 )\nreturn 4294966256LL;\nwhile ( *(_BYTE *)src )\n{\nif ( src >= &v13[v15 - 1] )\nreturn 4294966256LL;\nsrc = (char *)src + 1;\n}\nsrc = (char *)src + 1;\nif ( a6 < (int)(v15 - ((_DWORD)src - ((unsigned int)&savedregs - 528))) )\nreturn 4294966160LL;\n*a3 = v15 - ((_DWORD)src - ((unsigned int)&savedregs - 528));\nmemcpy(a5, src, *a3);\nreturn 0LL;\n}"
    },
    {
        "addr": 4231042,
        "funname": "sub_408F82",
        "code": "__int64 __fastcall sub_408F82(__int64 a1, int a2, int a3, int a4, _QWORD *a5, _BYTE *a6)\n{\n__int64 result; // rax\nchar *v7; // rax\nint v8; // er8\nint v9; // er9\n__int64 v10; // rdx\n__int64 v11; // rdx\n__int64 v12; // rdx\nint v17; // [rsp+3Ch] [rbp-14h]\nchar *sa; // [rsp+40h] [rbp-10h]\nchar *s; // [rsp+40h] [rbp-10h]\nint v20; // [rsp+4Ch] [rbp-4h]\n\nv17 = *(_DWORD *)(a1 + 4);\nif ( *(_DWORD *)(a1 + 184) )\nreturn 4294966256LL;\nif ( a3 == 5 )\n{\nv20 = v17 - 38;\n}\nelse\n{\nif ( a3 > 5 )\nreturn 4294966272LL;\nif ( a3 )\n{\nif ( a3 >= 0 && (unsigned int)(a3 - 2) <= 2 )\n{\nv20 = v17 - 37;\ngoto LABEL_11;\n}\nreturn 4294966272LL;\n}\nv20 = v17 - 3 - a4;\n}\nLABEL_11:\nif ( v20 <= 7 )\nreturn 4294966272LL;\n*a6 = 0;\nsa = a6 + 2;\na6[1] = 1;\nmemset(a6 + 2, 255, v20);\nv7 = &sa[v20];\ns = v7 + 1;\n*v7 = 0;\nswitch ( a3 )\n{\ncase 0:\nmemcpy(s, a5, a4);\ngoto LABEL_22;\ncase 2:\nmemcpy(s, &unk_411448, 0x12uLL);\nv10 = a5[1];\n*(_QWORD *)(s + 18) = *a5;\n*(_QWORD *)(s + 26) = v10;\ns[13] = 2;\ngoto LABEL_22;\ncase 3:\nmemcpy(s, &unk_411448, 0x12uLL);\nv11 = a5[1];\n*(_QWORD *)(s + 18) = *a5;\n*(_QWORD *)(s + 26) = v11;\ns[13] = 4;\ngoto LABEL_22;\ncase 4:\nmemcpy(s, &unk_411448, 0x12uLL);\nv12 = a5[1];\n*(_QWORD *)(s + 18) = *a5;\n*(_QWORD *)(s + 26) = v12;\ns[13] = 5;\ngoto LABEL_22;\ncase 5:\nmemcpy(s, &unk_41145B, 0xFuLL);\nmemcpy(s + 15, a5, 0x14uLL);\nLABEL_22:\nif ( a2 )\nresult = sub_408A81(a1, (__int64)a6, (__int64)a6, (__int64)a6, v8, v9);\nelse\nresult = sub_408964(a1, (__int64)a6, (__int64)a6, (int)a6, v8, v9);\nbreak;\ndefault:\nresult = 4294966272LL;\nbreak;\n}\nreturn result;\n}"
    },
    {
        "addr": 4231651,
        "funname": "sub_4091E3",
        "code": "__int64 __fastcall sub_4091E3(__int64 a1, int a2, int a3, int a4, const void *a5, __int64 a6)\n{\n__int64 result; // rax\nunsigned int v7; // eax\n_BYTE *v8; // rax\n_BYTE *v9; // rax\nchar v13[523]; // [rsp+30h] [rbp-220h] BYREF\nchar v14; // [rsp+23Bh] [rbp-15h]\nint v15; // [rsp+23Ch] [rbp-14h]\nunsigned int v16; // [rsp+240h] [rbp-10h]\nint v17; // [rsp+244h] [rbp-Ch]\nvoid *s1; // [rsp+248h] [rbp-8h]\n__int64 savedregs; // [rsp+250h] [rbp+0h] BYREF\n\nv17 = *(_DWORD *)(a1 + 4);\nif ( v17 <= 15 || v17 > 512 )\nreturn 4294966272LL;\nif ( a2 )\nv7 = sub_408A81(a1, a6, (__int64)v13, a6, (int)a5, a6);\nelse\nv7 = sub_408964(a1, a6, (__int64)v13, a6, (int)a5, a6);\nv16 = v7;\nif ( v7 )\nreturn v16;\ns1 = v13;\nif ( *(_DWORD *)(a1 + 184) )\nreturn 4294966256LL;\nv8 = s1;\ns1 = (char *)s1 + 1;\nif ( *v8 )\nreturn 4294966256LL;\nv9 = s1;\ns1 = (char *)s1 + 1;\nif ( *v9 != 1 )\nreturn 4294966256LL;\nwhile ( *(_BYTE *)s1 )\n{\nif ( s1 >= &v13[v17 - 1] || *(_BYTE *)s1 != 0xFF )\nreturn 4294966256LL;\ns1 = (char *)s1 + 1;\n}\ns1 = (char *)s1 + 1;\nv15 = v17 - ((_DWORD)s1 - ((unsigned int)&savedregs - 544));\nif ( v15 != 34 )\ngoto LABEL_33;\nv14 = *((_BYTE *)s1 + 13);\n*((_BYTE *)s1 + 13) = 0;\nif ( memcmp(s1, &unk_411448, 0x12uLL) )\nreturn 4294966176LL;\nif ( v14 == 2 && a3 == 2 || v14 == 4 && a3 == 3 || v14 == 5 && a3 == 4 )\n{\nif ( !memcmp((char *)s1 + 18, a5, 0x10uLL) )\nresult = 0LL;\nelse\nresult = 4294966176LL;\n}\nelse\n{\nLABEL_33:\nif ( v15 == 35 && a3 == 5 )\n{\nif ( !memcmp(s1, &unk_41145B, 0xFuLL) && !memcmp((char *)s1 + 15, a5, 0x14uLL) )\nresult = 0LL;\nelse\nresult = 4294966176LL;\n}\nelse if ( v15 != a4 || a3 )\n{\nresult = 4294966256LL;\n}\nelse if ( !memcmp(s1, a5, a4) )\n{\nresult = 0LL;\n}\nelse\n{\nresult = 4294966176LL;\n}\n}\nreturn result;\n}"
    },
    {
        "addr": 4233479,
        "funname": "sub_409907",
        "code": "__int64 __fastcall sub_409907(_BYTE *a1, int *a2, unsigned __int8 *a3, int a4)\n{\n__int64 result; // rax\nint v5; // eax\nunsigned __int8 *v6; // rax\n_BYTE *v7; // rax\nunsigned __int8 *v8; // rax\nint v9; // eax\n_BYTE *v10; // rax\n_BYTE *v11; // rax\nunsigned __int8 *v13; // [rsp+4h] [rbp-38h]\nint v14; // [rsp+20h] [rbp-1Ch]\nint v15; // [rsp+24h] [rbp-18h]\nchar v16; // [rsp+24h] [rbp-18h]\nint v17; // [rsp+28h] [rbp-14h]\nint v18; // [rsp+28h] [rbp-14h]\n_BYTE *v19; // [rsp+2Ch] [rbp-10h]\n_BYTE *v20; // [rsp+2Ch] [rbp-10h]\nint v21; // [rsp+34h] [rbp-8h]\nint v22; // [rsp+38h] [rbp-4h]\n\nif ( !a4 )\nreturn 0LL;\nv21 = 8 * a4 / 6;\nv5 = 8 * a4 % 6;\nif ( v5 == 2 )\n{\nv21 += 3;\n}\nelse if ( v5 == 4 )\n{\nv21 += 2;\n}\nif ( v21 < *a2 )\n{\nv22 = 0;\nv19 = a1;\nwhile ( v22 < 3 * (a4 / 3) )\n{\nv17 = *a3;\nv15 = a3[1];\nv6 = a3 + 2;\na3 += 3;\nv14 = *v6;\n*v19 = byte_411A00[(v17 >> 2) & 0x3F];\nv19[1] = byte_411A00[(((16 * (_BYTE)v17) & 0x30) + (unsigned __int8)(v15 >> 4)) & 0x3F];\nv19[2] = byte_411A00[(((4 * (_BYTE)v15) & 0x3C) + (unsigned __int8)(v14 >> 6)) & 0x3F];\nv7 = v19 + 3;\nv19 += 4;\n*v7 = byte_411A00[v14 & 0x3F];\nv22 += 3;\n}\nif ( v22 < a4 )\n{\nv8 = a3;\nv13 = a3 + 1;\nv18 = *v8;\nif ( a4 <= v22 + 1 )\nv9 = 0;\nelse\nv9 = *v13;\nv16 = v9;\n*v19 = byte_411A00[(v18 >> 2) & 0x3F];\nv19[1] = byte_411A00[(((16 * (_BYTE)v18) & 0x30) + (unsigned __int8)(v9 >> 4)) & 0x3F];\nv10 = v19 + 2;\nv20 = v19 + 3;\nif ( a4 <= v22 + 1 )\n*v10 = 61;\nelse\n*v10 = byte_411A00[(4 * v16) & 0x3C];\nv11 = v20;\nv19 = v20 + 1;\n*v11 = 61;\n}\n*a2 = (_DWORD)v19 - (_DWORD)a1;\n*v19 = 0;\nresult = 0LL;\n}\nelse\n{\n*a2 = v21 + 1;\nresult = 4294967280LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4234182,
        "funname": "sub_409BC6",
        "code": "__int64 __fastcall sub_409BC6(_BYTE *a1, int *a2, _BYTE *a3, int a4)\n{\n__int64 result; // rax\n_BYTE *v5; // rax\n_BYTE *v6; // rax\n_BYTE *v7; // rax\n_BYTE *v8; // [rsp+4h] [rbp-38h]\n_BYTE *v9; // [rsp+1Ch] [rbp-20h]\nint v10; // [rsp+24h] [rbp-18h]\nint v11; // [rsp+30h] [rbp-Ch]\nint v12; // [rsp+30h] [rbp-Ch]\nint v13; // [rsp+30h] [rbp-Ch]\nint v14; // [rsp+34h] [rbp-8h]\nint v15; // [rsp+34h] [rbp-8h]\nint i; // [rsp+38h] [rbp-4h]\n\nv8 = a3;\nv11 = 0;\nv14 = 0;\nfor ( i = 0; i < a4; ++i )\n{\nif ( (a4 - i <= 1 || a3[i] != 13 || a3[i + 1] != 10) && a3[i] != 10 )\n{\nif ( a3[i] == 61 && ++v14 > 2 )\nreturn 4294967278LL;\nif ( (char)a3[i] < 0 || byte_411A40[(unsigned __int8)a3[i]] == 127 )\nreturn 4294967278LL;\nif ( (unsigned __int8)byte_411A40[(unsigned __int8)a3[i]] <= 0x3Fu && v14 )\nreturn 4294967278LL;\n++v11;\n}\n}\nif ( !v11 )\nreturn 0LL;\nv12 = (6 * v11 + 7) >> 3;\nif ( v12 <= *a2 )\n{\nv15 = 3;\nv10 = 0;\nv13 = 0;\nv9 = a1;\nwhile ( i > 0 )\n{\nif ( *v8 != 13 && *v8 != 10 )\n{\nv15 -= byte_411A40[(unsigned __int8)*v8] == 64;\nv10 = (v10 << 6) | byte_411A40[(unsigned __int8)*v8] & 0x3F;\nif ( ++v13 == 4 )\n{\nv13 = 0;\nif ( v15 > 0 )\n{\nv5 = v9++;\n*v5 = BYTE2(v10);\n}\nif ( v15 > 1 )\n{\nv6 = v9++;\n*v6 = BYTE1(v10);\n}\nif ( v15 > 2 )\n{\nv7 = v9++;\n*v7 = v10;\n}\n}\n}\n--i;\n++v8;\n}\n*a2 = (_DWORD)v9 - (_DWORD)a1;\nresult = 0LL;\n}\nelse\n{\n*a2 = v12;\nresult = 4294967280LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4235137,
        "funname": "sub_409F81",
        "code": "void *sub_409F81(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, ...)\n{\nvoid *result; // rax\n__int64 *v7; // rax\ngcc_va_list va; // [rsp+10h] [rbp-C8h] BYREF\n__int64 v10; // [rsp+30h] [rbp-A8h]\n__int64 v11; // [rsp+38h] [rbp-A0h]\n__int64 v12; // [rsp+40h] [rbp-98h]\n__int64 v13; // [rsp+48h] [rbp-90h]\n__int64 v14; // [rsp+50h] [rbp-88h]\n\nva_start(va, a6);\nv10 = a2;\nv11 = a3;\nv12 = a4;\nv13 = a5;\nv14 = a6;\nva[0].gp_offset = 8;\nresult = va[0].reg_save_area;\nwhile ( a1 )\n{\n*(_DWORD *)a1 = 1;\n*(_DWORD *)(a1 + 4) = 0;\n*(_QWORD *)(a1 + 8) = 0LL;\nif ( va[0].gp_offset > 0x2F )\n{\nv7 = (__int64 *)va[0].overflow_arg_area;\nva[0].overflow_arg_area = (char *)va[0].overflow_arg_area + 8;\n}\nelse\n{\nv7 = (__int64 *)((char *)va[0].reg_save_area + va[0].gp_offset);\nva[0].gp_offset += 8;\n}\nresult = (void *)*v7;\na1 = (__int64)result;\n}\nreturn result;\n}"
    },
    {
        "addr": 4235400,
        "funname": "sub_40A088",
        "code": "void *sub_40A088(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, ...)\n{\nvoid *result; // rax\n__int64 *v7; // rax\ngcc_va_list va; // [rsp+18h] [rbp-C8h] BYREF\n__int64 v10; // [rsp+38h] [rbp-A8h]\n__int64 v11; // [rsp+40h] [rbp-A0h]\n__int64 v12; // [rsp+48h] [rbp-98h]\n__int64 v13; // [rsp+50h] [rbp-90h]\n__int64 v14; // [rsp+58h] [rbp-88h]\n\nva_start(va, a6);\nv10 = a2;\nv11 = a3;\nv12 = a4;\nv13 = a5;\nv14 = a6;\nva[0].gp_offset = 8;\nresult = va[0].reg_save_area;\nwhile ( a1 )\n{\nif ( *(_QWORD *)(a1 + 8) )\n{\nmemset(*(void **)(a1 + 8), 0, 8 * *(_DWORD *)(a1 + 4));\nfree(*(void **)(a1 + 8));\n}\n*(_DWORD *)a1 = 1;\n*(_DWORD *)(a1 + 4) = 0;\n*(_QWORD *)(a1 + 8) = 0LL;\nif ( va[0].gp_offset > 0x2F )\n{\nv7 = (__int64 *)va[0].overflow_arg_area;\nva[0].overflow_arg_area = (char *)va[0].overflow_arg_area + 8;\n}\nelse\n{\nv7 = (__int64 *)((char *)va[0].reg_save_area + va[0].gp_offset);\nva[0].gp_offset += 8;\n}\nresult = (void *)*v7;\na1 = (__int64)result;\n}\nreturn result;\n}"
    },
    {
        "addr": 4236828,
        "funname": "sub_40A61C",
        "code": "__int64 __fastcall sub_40A61C(__int64 a1, int a2, const char *a3, __int64 a4, __int64 a5, __int64 a6)\n{\n__int64 v7; // rdx\n__int64 v8; // rcx\n__int64 v9; // r8\n__int64 v10; // r9\nint v11; // eax\nchar v13[24]; // [rsp+20h] [rbp-30h] BYREF\n__int64 v14; // [rsp+38h] [rbp-18h] BYREF\nint v15; // [rsp+40h] [rbp-10h]\nint v16; // [rsp+44h] [rbp-Ch]\nint i; // [rsp+48h] [rbp-8h]\nunsigned int v18; // [rsp+4Ch] [rbp-4h]\n\nif ( a2 <= 1 || a2 > 16 )\nreturn 4294967292LL;\nsub_409F81((__int64)v13, 0LL, (__int64)a3, a4, a5, a6);\nif ( a2 == 16 )\n{\nv15 = (4 * strlen(a3) + 63) >> 6;\nv18 = sub_40A1E4(a1, v15);\nif ( !v18 )\n{\nv18 = sub_40A3E1(a1, 0);\nif ( !v18 )\n{\ni = strlen(a3) - 1;\nv16 = 0;\nwhile ( i >= 0 )\n{\nif ( !i )\n{\nv7 = 0LL;\nif ( *a3 == 45 )\n{\n*(_DWORD *)a1 = -1;\nbreak;\n}\n}\nv18 = sub_40A58B(&v14, 16, a3[i]);\nif ( v18 )\nbreak;\nv8 = *(_QWORD *)(a1 + 8);\nv7 = (v14 << (4 * (unsigned __int8)(v16 % 16))) | *(_QWORD *)(v8 + 8LL * (v16 / 16));\n*(_QWORD *)(v8 + 8LL * (v16 / 16)) = v7;\n--i;\n++v16;\n}\n}\n}\n}\nelse\n{\nv18 = sub_40A3E1(a1, 0);\nif ( !v18 )\n{\nfor ( i = 0; ; ++i )\n{\nv11 = strlen(a3);\nif ( i >= v11 )\nbreak;\nif ( i || *a3 != 45 )\n{\nv18 = sub_40A58B(&v14, a2, a3[i]);\nif ( v18 )\nbreak;\nv18 = sub_40E34F(v13, a1, a2);\nif ( v18 )\nbreak;\nv18 = sub_40BC10(a1, v13, (unsigned int)v14);\nif ( v18 )\nbreak;\n}\nelse\n{\n*(_DWORD *)a1 = -1;\n}\n}\n}\n}\nsub_40A088((__int64)v13, 0LL, v7, v8, v9, v10);\nreturn v18;\n}"
    },
    {
        "addr": 4237491,
        "funname": "sub_40A8B3",
        "code": "__int64 __fastcall sub_40A8B3(__int64 a1, int a2, _QWORD *a3)\n{\nchar v4; // si\n_BYTE *v5; // rax\nunsigned __int64 v7; // [rsp+20h] [rbp-10h] BYREF\nunsigned int v8; // [rsp+2Ch] [rbp-4h]\n\nif ( a2 <= 1 || a2 > 16 )\nreturn 4294967292LL;\nv8 = sub_40EDD5(&v7, a1, (unsigned int)a2);\nif ( !v8 )\n{\nv8 = sub_40ECBB(a1, 0LL, a1, (unsigned int)a2);\nif ( !v8 && (!(unsigned int)sub_40B627(a1, 0LL) || (v8 = sub_40A8B3(a1, (unsigned int)a2, a3)) == 0) )\n{\nif ( v7 > 9 )\nv4 = v7 + 55;\nelse\nv4 = v7 + 48;\nv5 = (_BYTE *)(*a3)++;\n*v5 = v4;\n}\n}\nreturn v8;\n}"
    },
    {
        "addr": 4238219,
        "funname": "sub_40AB8B",
        "code": "__int64 __fastcall sub_40AB8B(__int64 a1, unsigned int a2, FILE *a3)\n{\n__int64 v4; // r8\n__int64 v5; // r9\n__int64 v7; // [rsp+18h] [rbp-428h]\nchar s[1032]; // [rsp+20h] [rbp-420h] BYREF\n__int64 v9; // [rsp+428h] [rbp-18h] BYREF\nchar *v10; // [rsp+430h] [rbp-10h]\nint v11; // [rsp+43Ch] [rbp-4h]\n\nv7 = a1;\nmemset(s, 0, 0x400uLL);\nif ( !fgets(s, 1023, a3) )\nreturn 4294967294LL;\nv11 = strlen(s);\nif ( s[v11 - 1] == 10 )\ns[--v11] = 0;\nif ( s[v11 - 1] == 13 )\ns[--v11] = 0;\nv10 = &s[v11];\ndo\n--v10;\nwhile ( v10 >= s && !(unsigned int)sub_40A58B(&v9, a2, *v10) );\nreturn sub_40A61C(v7, a2, v10 + 1, a2, v4, v5);\n}"
    },
    {
        "addr": 4238873,
        "funname": "sub_40AE19",
        "code": "__int64 __fastcall sub_40AE19(__int64 a1, __int64 a2, int a3)\n{\nint v3; // eax\nint v4; // edx\nint i; // [rsp+20h] [rbp-10h]\nint v8; // [rsp+24h] [rbp-Ch]\nint v9; // [rsp+28h] [rbp-8h]\nunsigned int v10; // [rsp+2Ch] [rbp-4h]\n\nfor ( i = 0; i < a3 && !*(_BYTE *)(i + a2); ++i )\n;\nv3 = a3 - i + 7;\nv4 = a3 - i + 14;\nif ( v3 < 0 )\nv3 = v4;\nv10 = sub_40A1E4(a1, v3 >> 3);\nif ( !v10 )\n{\nv10 = sub_40A3E1(a1, 0);\nif ( !v10 )\n{\nv9 = a3 - 1;\nv8 = 0;\nwhile ( v9 >= i )\n{\n*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * (v8 / 8)) |= (unsigned __int64)*(unsigned __int8 *)(v9-- + a2) << (8 * (unsigned __int8)(v8 % 8));\n++v8;\n}\n}\n}\nreturn v10;\n}"
    },
    {
        "addr": 4239367,
        "funname": "sub_40B007",
        "code": "__int64 __fastcall sub_40B007(__int64 a1, int a2)\n{\nint v2; // eax\n__int64 v4; // [rsp+10h] [rbp-20h]\nchar v5; // [rsp+18h] [rbp-18h]\n_BYTE v6[12]; // [rsp+1Ch] [rbp-14h]\nint v7; // [rsp+28h] [rbp-8h]\nint i; // [rsp+28h] [rbp-8h]\nint j; // [rsp+28h] [rbp-8h]\nunsigned int v10; // [rsp+2Ch] [rbp-4h]\n\n*(_DWORD *)&v6[8] = 0;\n*(_QWORD *)v6 = (unsigned int)(a2 / 64);\nv5 = a2 & 0x3F;\nv7 = a2 + sub_40A4D9(a1);\nif ( v7 <= *(_DWORD *)(a1 + 4) << 6 )\ngoto LABEL_5;\nv2 = v7 + 63;\nif ( v7 + 63 < 0 )\nv2 = v7 + 126;\nv10 = sub_40A1E4(a1, v2 >> 6);\nif ( !v10 )\n{\nLABEL_5:\nv10 = 0;\nif ( *(int *)v6 > 0 )\n{\nfor ( i = *(_DWORD *)(a1 + 4) - 1; i >= *(int *)v6; --i )\n*(_QWORD *)(8LL * i + *(_QWORD *)(a1 + 8)) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * (i - *(_DWORD *)v6));\nwhile ( i >= 0 )\n*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * i--) = 0LL;\n}\nif ( (a2 & 0x3F) != 0 )\n{\nfor ( j = a2 / 64; j < *(_DWORD *)(a1 + 4); ++j )\n{\nv4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * j) >> (64 - v5);\n*(_QWORD *)(8LL * j + *(_QWORD *)(a1 + 8)) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * j) << v5;\n*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * j) |= *(_QWORD *)&v6[4];\n*(_QWORD *)&v6[4] = v4;\n}\n}\n}\nreturn v10;\n}"
    },
    {
        "addr": 4239837,
        "funname": "sub_40B1DD",
        "code": "__int64 __fastcall sub_40B1DD(__int64 a1, int a2)\n{\n__int64 v3; // [rsp+Ch] [rbp-20h]\nchar v4; // [rsp+14h] [rbp-18h]\n_BYTE v5[12]; // [rsp+18h] [rbp-14h]\nint i; // [rsp+28h] [rbp-4h]\nint j; // [rsp+28h] [rbp-4h]\n\n*(_DWORD *)&v5[8] = 0;\n*(_QWORD *)v5 = (unsigned int)(a2 / 64);\nv4 = a2 & 0x3F;\nif ( a2 / 64 > 0 )\n{\nfor ( i = 0; i < *(_DWORD *)(a1 + 4) - *(_DWORD *)v5; ++i )\n*(_QWORD *)(8LL * i + *(_QWORD *)(a1 + 8)) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * (i + *(_DWORD *)v5));\nwhile ( i < *(_DWORD *)(a1 + 4) )\n*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * i++) = 0LL;\n}\nif ( (a2 & 0x3F) != 0 )\n{\nfor ( j = *(_DWORD *)(a1 + 4) - 1; j >= 0; --j )\n{\nv3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * j) << (64 - v4);\n*(_QWORD *)(8LL * j + *(_QWORD *)(a1 + 8)) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * j) >> v4;\n*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * j) |= *(_QWORD *)&v5[4];\n*(_QWORD *)&v5[4] = v3;\n}\n}\nreturn 0LL;\n}"
    },
    {
        "addr": 4240221,
        "funname": "sub_40B35D",
        "code": "__int64 __fastcall sub_40B35D(__int64 a1, __int64 a2)\n{\nint j; // [rsp+18h] [rbp-8h]\nint i; // [rsp+1Ch] [rbp-4h]\n\nfor ( i = *(_DWORD *)(a1 + 4) - 1; i >= 0 && !*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * i); --i )\n;\nfor ( j = *(_DWORD *)(a2 + 4) - 1; j >= 0 && !*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * j); --j )\n;\nif ( i < 0 && j < 0 )\nreturn 0LL;\nif ( i > j )\nreturn 1LL;\nif ( j > i )\nreturn 0xFFFFFFFFLL;\nwhile ( i >= 0 )\n{\nif ( *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * i) > *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * i) )\nreturn 1LL;\nif ( *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * i) < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * i) )\nreturn 0xFFFFFFFFLL;\n--i;\n}\nreturn 0LL;\n}"
    },
    {
        "addr": 4240540,
        "funname": "sub_40B49C",
        "code": "__int64 __fastcall sub_40B49C(unsigned int *a1, __int64 a2)\n{\nint j; // [rsp+18h] [rbp-8h]\nint i; // [rsp+1Ch] [rbp-4h]\n\nfor ( i = a1[1] - 1; i >= 0 && !*(_QWORD *)(*((_QWORD *)a1 + 1) + 8LL * i); --i )\n;\nfor ( j = *(_DWORD *)(a2 + 4) - 1; j >= 0 && !*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * j); --j )\n;\nif ( i < 0 && j < 0 )\nreturn 0LL;\nif ( i > j )\nreturn *a1;\nif ( j > i )\nreturn -*a1;\nif ( (int)*a1 > 0 && *(int *)a2 < 0 )\nreturn 1LL;\nif ( *(int *)a2 > 0 && (*a1 & 0x80000000) != 0 )\nreturn 0xFFFFFFFFLL;\nwhile ( i >= 0 )\n{\nif ( *(_QWORD *)(*((_QWORD *)a1 + 1) + 8LL * i) > *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * i) )\nreturn *a1;\nif ( *(_QWORD *)(*((_QWORD *)a1 + 1) + 8LL * i) < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * i) )\nreturn -*a1;\n--i;\n}\nreturn 0LL;\n}"
    },
    {
        "addr": 4241024,
        "funname": "sub_40B680",
        "code": "__int64 __fastcall sub_40B680(__int64 a1, __int64 a2, __int64 a3)\n{\n__int64 v4; // [rsp+8h] [rbp-48h]\n__int64 v5; // [rsp+10h] [rbp-40h]\nunsigned __int64 v6; // [rsp+28h] [rbp-28h]\n_BOOL8 v7; // [rsp+28h] [rbp-28h]\nunsigned __int64 *v8; // [rsp+30h] [rbp-20h]\n_QWORD *v9; // [rsp+38h] [rbp-18h]\nint i; // [rsp+44h] [rbp-Ch]\nint j; // [rsp+48h] [rbp-8h]\nunsigned int v12; // [rsp+4Ch] [rbp-4h]\n\nv5 = a2;\nv4 = a3;\nif ( a1 == a3 )\n{\nv5 = a1;\nv4 = a2;\n}\nif ( a1 == v5 || (v12 = sub_40A2C2(a1, v5)) == 0 )\n{\nfor ( i = *(_DWORD *)(v4 + 4) - 1; i >= 0 && !*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8LL * i); --i )\n;\nv12 = sub_40A1E4(a1, i + 1);\nif ( !v12 )\n{\nv9 = *(_QWORD **)(v4 + 8);\nv8 = *(unsigned __int64 **)(a1 + 8);\nv6 = 0LL;\nfor ( j = 0; j <= i; ++j )\n{\n*v8 += v6;\nv7 = v6 > *v8;\n*v8 += *v9;\nv6 = (*v8++ < *v9++) + v7;\n}\nwhile ( v6 )\n{\nif ( j >= *(_DWORD *)(a1 + 4) )\n{\nv12 = sub_40A1E4(a1, j + 1);\nif ( v12 )\nreturn v12;\nv8 = (unsigned __int64 *)(*(_QWORD *)(a1 + 8) + 8LL * j);\n}\n*v8 += v6;\nv6 = v6 > *v8;\n++j;\n}\n}\n}\nreturn v12;\n}"
    },
    {
        "addr": 4241725,
        "funname": "sub_40B93D",
        "code": "__int64 __fastcall sub_40B93D(__int64 a1, __int64 a2, __int64 a3)\n{\n__int64 v3; // rdx\n__int64 v4; // rcx\n__int64 v5; // r8\n__int64 v6; // r9\n__int64 v8; // rdx\n__int64 v9; // rcx\n__int64 v10; // r8\n__int64 v11; // r9\nchar *v12; // [rsp+8h] [rbp-38h]\nchar v13[24]; // [rsp+20h] [rbp-20h] BYREF\nint i; // [rsp+38h] [rbp-8h]\nunsigned int v15; // [rsp+3Ch] [rbp-4h]\n\nv12 = (char *)a3;\nif ( (int)sub_40B35D(a2, a3) < 0 )\nreturn 4294967286LL;\nsub_409F81((__int64)v13, 0LL, v3, v4, v5, v6);\nif ( (char *)a1 != v12 )\ngoto LABEL_6;\nv15 = sub_40A2C2((__int64)v13, (__int64)v12);\nif ( !v15 )\n{\nv12 = v13;\nLABEL_6:\nif ( a1 == a2 || (v15 = sub_40A2C2(a1, a2)) == 0 )\n{\nv15 = 0;\nfor ( i = *((_DWORD *)v12 + 1) - 1; i >= 0 && !*(_QWORD *)(*((_QWORD *)v12 + 1) + 8LL * i); --i )\n;\nsub_40B85B(i + 1, *((unsigned __int64 **)v12 + 1), *(unsigned __int64 **)(a1 + 8));\n}\n}\nsub_40A088((__int64)v13, 0LL, v8, v9, v10, v11);\nreturn v15;\n}"
    },
    {
        "addr": 4242642,
        "funname": "sub_40BCD2",
        "code": "_BOOL8 __fastcall sub_40BCD2(int a1, _QWORD *a2, unsigned __int64 *a3, unsigned __int64 a4)\n{\nunsigned __int64 *v4; // rax\nunsigned __int64 *v5; // rax\nunsigned __int64 *v6; // rax\nunsigned __int64 *v7; // rax\nunsigned __int64 *v8; // rax\nunsigned __int64 *v9; // rax\nunsigned __int64 *v10; // rax\nunsigned __int64 *v11; // rax\nunsigned __int64 *v12; // rax\nunsigned __int64 *v13; // rax\nunsigned __int64 *v14; // rax\nunsigned __int64 *v15; // rax\nunsigned __int64 *v16; // rax\nunsigned __int64 *v17; // rax\nunsigned __int64 *v18; // rax\nunsigned __int64 *v19; // rax\nunsigned __int64 *v20; // rax\nunsigned __int64 *v21; // rax\nunsigned __int64 *v22; // rax\nunsigned __int64 *v23; // rax\nunsigned __int64 *v24; // rax\nunsigned __int64 *v25; // rax\nunsigned __int64 *v26; // rax\nunsigned __int64 *v27; // rax\nunsigned __int64 *v28; // rax\n_BOOL8 result; // rax\nunsigned __int64 *v31; // [rsp+8h] [rbp-E8h]\nunsigned __int64 *v32; // [rsp+8h] [rbp-E8h]\n_QWORD *v34; // [rsp+10h] [rbp-E0h]\n_QWORD *v35; // [rsp+10h] [rbp-E0h]\nunsigned __int64 v37; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v38; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v39; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v40; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v41; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v42; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v43; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v44; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v45; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v46; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v47; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v48; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v49; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v50; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v51; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v52; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v53; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v54; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v55; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v56; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v57; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v58; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v59; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v60; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v61; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v62; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v63; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v64; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v65; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v66; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v67; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v68; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v69; // [rsp+20h] [rbp-D0h]\nunsigned __int64 v70; // [rsp+28h] [rbp-C8h]\nunsigned __int64 v71; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v72; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v73; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v74; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v75; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v76; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v77; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v78; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v79; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v80; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v81; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v82; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v83; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v84; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v85; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v86; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v87; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v88; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v89; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v90; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v91; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v92; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v93; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v94; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v95; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v96; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v97; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v98; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v99; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v100; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v101; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v102; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v103; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v104; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v105; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v106; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v107; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v108; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v109; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v110; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v111; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v112; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v113; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v114; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v115; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v116; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v117; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v118; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v119; // [rsp+30h] [rbp-C0h]\nunsigned __int64 v120; // [rsp+38h] [rbp-B8h]\n__int64 v121; // [rsp+40h] [rbp-B0h]\n__int64 v122; // [rsp+40h] [rbp-B0h]\n__int64 v123; // [rsp+40h] [rbp-B0h]\n__int64 v124; // [rsp+40h] [rbp-B0h]\n__int64 v125; // [rsp+40h] [rbp-B0h]\n__int64 v126; // [rsp+40h] [rbp-B0h]\n__int64 v127; // [rsp+40h] [rbp-B0h]\n__int64 v128; // [rsp+40h] [rbp-B0h]\n__int64 v129; // [rsp+40h] [rbp-B0h]\n__int64 v130; // [rsp+40h] [rbp-B0h]\n__int64 v131; // [rsp+40h] [rbp-B0h]\n__int64 v132; // [rsp+40h] [rbp-B0h]\n__int64 v133; // [rsp+40h] [rbp-B0h]\n__int64 v134; // [rsp+40h] [rbp-B0h]\n__int64 v135; // [rsp+40h] [rbp-B0h]\n__int64 v136; // [rsp+40h] [rbp-B0h]\n__int64 v137; // [rsp+48h] [rbp-A8h]\n__int64 v138; // [rsp+48h] [rbp-A8h]\n__int64 v139; // [rsp+48h] [rbp-A8h]\n__int64 v140; // [rsp+48h] [rbp-A8h]\n__int64 v141; // [rsp+48h] [rbp-A8h]\n__int64 v142; // [rsp+48h] [rbp-A8h]\n__int64 v143; // [rsp+48h] [rbp-A8h]\n__int64 v144; // [rsp+48h] [rbp-A8h]\n__int64 v145; // [rsp+48h] [rbp-A8h]\n__int64 v146; // [rsp+48h] [rbp-A8h]\n__int64 v147; // [rsp+48h] [rbp-A8h]\n__int64 v148; // [rsp+48h] [rbp-A8h]\n__int64 v149; // [rsp+48h] [rbp-A8h]\n__int64 v150; // [rsp+48h] [rbp-A8h]\n__int64 v151; // [rsp+48h] [rbp-A8h]\n__int64 v152; // [rsp+48h] [rbp-A8h]\nunsigned __int64 v153; // [rsp+50h] [rbp-A0h]\nunsigned __int64 v154; // [rsp+60h] [rbp-90h]\nunsigned __int64 v155; // [rsp+60h] [rbp-90h]\nunsigned __int64 v156; // [rsp+60h] [rbp-90h]\nunsigned __int64 v157; // [rsp+60h] [rbp-90h]\nunsigned __int64 v158; // [rsp+60h] [rbp-90h]\nunsigned __int64 v159; // [rsp+60h] [rbp-90h]\nunsigned __int64 v160; // [rsp+60h] [rbp-90h]\nunsigned __int64 v161; // [rsp+60h] [rbp-90h]\nunsigned __int64 v162; // [rsp+60h] [rbp-90h]\nunsigned __int64 v163; // [rsp+60h] [rbp-90h]\nunsigned __int64 v164; // [rsp+60h] [rbp-90h]\nunsigned __int64 v165; // [rsp+60h] [rbp-90h]\nunsigned __int64 v166; // [rsp+60h] [rbp-90h]\nunsigned __int64 v167; // [rsp+60h] [rbp-90h]\nunsigned __int64 v168; // [rsp+60h] [rbp-90h]\nunsigned __int64 v169; // [rsp+60h] [rbp-90h]\nunsigned __int64 v170; // [rsp+60h] [rbp-90h]\nunsigned __int64 v171; // [rsp+68h] [rbp-88h]\nunsigned __int64 v172; // [rsp+70h] [rbp-80h]\nunsigned __int64 v173; // [rsp+70h] [rbp-80h]\nunsigned __int64 v174; // [rsp+70h] [rbp-80h]\nunsigned __int64 v175; // [rsp+70h] [rbp-80h]\nunsigned __int64 v176; // [rsp+70h] [rbp-80h]\nunsigned __int64 v177; // [rsp+70h] [rbp-80h]\nunsigned __int64 v178; // [rsp+70h] [rbp-80h]\nunsigned __int64 v179; // [rsp+70h] [rbp-80h]\nunsigned __int64 v180; // [rsp+70h] [rbp-80h]\nunsigned __int64 v181; // [rsp+70h] [rbp-80h]\nunsigned __int64 v182; // [rsp+70h] [rbp-80h]\nunsigned __int64 v183; // [rsp+70h] [rbp-80h]\nunsigned __int64 v184; // [rsp+70h] [rbp-80h]\nunsigned __int64 v185; // [rsp+70h] [rbp-80h]\nunsigned __int64 v186; // [rsp+70h] [rbp-80h]\nunsigned __int64 v187; // [rsp+70h] [rbp-80h]\nunsigned __int64 v188; // [rsp+70h] [rbp-80h]\nunsigned __int64 v189; // [rsp+70h] [rbp-80h]\nunsigned __int64 v190; // [rsp+70h] [rbp-80h]\nunsigned __int64 v191; // [rsp+70h] [rbp-80h]\nunsigned __int64 v192; // [rsp+70h] [rbp-80h]\nunsigned __int64 v193; // [rsp+70h] [rbp-80h]\nunsigned __int64 v194; // [rsp+70h] [rbp-80h]\nunsigned __int64 v195; // [rsp+70h] [rbp-80h]\nunsigned __int64 v196; // [rsp+70h] [rbp-80h]\nunsigned __int64 v197; // [rsp+78h] [rbp-78h]\n__int64 v198; // [rsp+80h] [rbp-70h]\n__int64 v199; // [rsp+80h] [rbp-70h]\n__int64 v200; // [rsp+80h] [rbp-70h]\n__int64 v201; // [rsp+80h] [rbp-70h]\n__int64 v202; // [rsp+80h] [rbp-70h]\n__int64 v203; // [rsp+80h] [rbp-70h]\n__int64 v204; // [rsp+80h] [rbp-70h]\n__int64 v205; // [rsp+80h] [rbp-70h]\n__int64 v206; // [rsp+88h] [rbp-68h]\n__int64 v207; // [rsp+88h] [rbp-68h]\n__int64 v208; // [rsp+88h] [rbp-68h]\n__int64 v209; // [rsp+88h] [rbp-68h]\n__int64 v210; // [rsp+88h] [rbp-68h]\n__int64 v211; // [rsp+88h] [rbp-68h]\n__int64 v212; // [rsp+88h] [rbp-68h]\n__int64 v213; // [rsp+88h] [rbp-68h]\nunsigned __int64 v214; // [rsp+90h] [rbp-60h]\nunsigned __int64 v215; // [rsp+A0h] [rbp-50h]\nunsigned __int64 v216; // [rsp+A0h] [rbp-50h]\nunsigned __int64 v217; // [rsp+A0h] [rbp-50h]\nunsigned __int64 v218; // [rsp+A8h] [rbp-48h]\nunsigned __int64 v219; // [rsp+B0h] [rbp-40h]\nunsigned __int64 v220; // [rsp+B0h] [rbp-40h]\nunsigned __int64 v221; // [rsp+B0h] [rbp-40h]\nunsigned __int64 v222; // [rsp+B0h] [rbp-40h]\nunsigned __int64 v223; // [rsp+B8h] [rbp-38h]\n__int64 v224; // [rsp+C0h] [rbp-30h]\n__int64 v225; // [rsp+C8h] [rbp-28h]\nunsigned __int64 v226; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v227; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v228; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v229; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v230; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v231; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v232; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v233; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v234; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v235; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v236; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v237; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v238; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v239; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v240; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v241; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v242; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v243; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v244; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v245; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v246; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v247; // [rsp+E8h] [rbp-8h]\nunsigned __int64 v248; // [rsp+E8h] [rbp-8h]\n\nv226 = 0LL;\nwhile ( a1 > 15 )\n{\nv153 = HIDWORD(a4);\nv137 = (unsigned int)*a2;\nv121 = HIDWORD(*a2);\nv34 = a2 + 1;\nv120 = (HIDWORD(a4) * v137) << 32;\nv70 = ((unsigned int)a4 * v121) << 32;\nv71 = v120 + (unsigned int)a4 * v137;\nv37 = (v71 < v120)\n+ (((unsigned __int64)(unsigned int)a4 * v121) >> 32)\n+ ((unsigned __int64)(HIDWORD(a4) * v137) >> 32)\n+ HIDWORD(a4) * v121;\nv72 = v70 + v71;\nv38 = (v72 < v70) + v37;\nv73 = v226 + v72;\nv39 = (v73 < v226) + v38;\nv74 = *a3 + v73;\nv227 = (v74 < *a3) + v39;\nv4 = a3;\nv31 = a3 + 1;\n*v4 = v74;\nv138 = (unsigned int)*v34;\nv122 = HIDWORD(*v34++);\nv75 = (((unsigned int)a4 * v122) << 32) + ((HIDWORD(a4) * v138) << 32) + (unsigned int)a4 * v138;\nv40 = (v75 < ((unsigned __int64)(unsigned int)a4 * v122) << 32)\n+ (((v153 * v138) << 32) + (unsigned int)a4 * v138 < (HIDWORD(a4) * v138) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v122) >> 32)\n+ ((v153 * v138) >> 32)\n+ v153 * v122;\nv76 = v227 + v75;\nv41 = (v76 < v227) + v40;\nv77 = *v31 + v76;\nv228 = (v77 < *v31) + v41;\nv5 = v31++;\n*v5 = v77;\nv139 = (unsigned int)*v34;\nv123 = HIDWORD(*v34++);\nv78 = (((unsigned int)a4 * v123) << 32) + ((HIDWORD(a4) * v139) << 32) + (unsigned int)a4 * v139;\nv42 = (v78 < ((unsigned __int64)(unsigned int)a4 * v123) << 32)\n+ (((v153 * v139) << 32) + (unsigned int)a4 * v139 < (HIDWORD(a4) * v139) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v123) >> 32)\n+ ((v153 * v139) >> 32)\n+ v153 * v123;\nv79 = v228 + v78;\nv43 = (v79 < v228) + v42;\nv80 = *v31 + v79;\nv229 = (v80 < *v31) + v43;\nv6 = v31++;\n*v6 = v80;\nv140 = (unsigned int)*v34;\nv124 = HIDWORD(*v34++);\nv81 = (((unsigned int)a4 * v124) << 32) + ((HIDWORD(a4) * v140) << 32) + (unsigned int)a4 * v140;\nv44 = (v81 < ((unsigned __int64)(unsigned int)a4 * v124) << 32)\n+ (((v153 * v140) << 32) + (unsigned int)a4 * v140 < (HIDWORD(a4) * v140) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v124) >> 32)\n+ ((v153 * v140) >> 32)\n+ v153 * v124;\nv82 = v229 + v81;\nv45 = (v82 < v229) + v44;\nv83 = *v31 + v82;\nv230 = (v83 < *v31) + v45;\nv7 = v31++;\n*v7 = v83;\nv141 = (unsigned int)*v34;\nv125 = HIDWORD(*v34++);\nv84 = (((unsigned int)a4 * v125) << 32) + ((HIDWORD(a4) * v141) << 32) + (unsigned int)a4 * v141;\nv46 = (v84 < ((unsigned __int64)(unsigned int)a4 * v125) << 32)\n+ (((v153 * v141) << 32) + (unsigned int)a4 * v141 < (HIDWORD(a4) * v141) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v125) >> 32)\n+ ((v153 * v141) >> 32)\n+ v153 * v125;\nv85 = v230 + v84;\nv47 = (v85 < v230) + v46;\nv86 = *v31 + v85;\nv231 = (v86 < *v31) + v47;\nv8 = v31++;\n*v8 = v86;\nv142 = (unsigned int)*v34;\nv126 = HIDWORD(*v34++);\nv87 = (((unsigned int)a4 * v126) << 32) + ((HIDWORD(a4) * v142) << 32) + (unsigned int)a4 * v142;\nv48 = (v87 < ((unsigned __int64)(unsigned int)a4 * v126) << 32)\n+ (((v153 * v142) << 32) + (unsigned int)a4 * v142 < (HIDWORD(a4) * v142) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v126) >> 32)\n+ ((v153 * v142) >> 32)\n+ v153 * v126;\nv88 = v231 + v87;\nv49 = (v88 < v231) + v48;\nv89 = *v31 + v88;\nv232 = (v89 < *v31) + v49;\nv9 = v31++;\n*v9 = v89;\nv143 = (unsigned int)*v34;\nv127 = HIDWORD(*v34++);\nv90 = (((unsigned int)a4 * v127) << 32) + ((HIDWORD(a4) * v143) << 32) + (unsigned int)a4 * v143;\nv50 = (v90 < ((unsigned __int64)(unsigned int)a4 * v127) << 32)\n+ (((v153 * v143) << 32) + (unsigned int)a4 * v143 < (HIDWORD(a4) * v143) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v127) >> 32)\n+ ((v153 * v143) >> 32)\n+ v153 * v127;\nv91 = v232 + v90;\nv51 = (v91 < v232) + v50;\nv92 = *v31 + v91;\nv233 = (v92 < *v31) + v51;\nv10 = v31++;\n*v10 = v92;\nv144 = (unsigned int)*v34;\nv128 = HIDWORD(*v34++);\nv93 = (((unsigned int)a4 * v128) << 32) + ((HIDWORD(a4) * v144) << 32) + (unsigned int)a4 * v144;\nv52 = (v93 < ((unsigned __int64)(unsigned int)a4 * v128) << 32)\n+ (((v153 * v144) << 32) + (unsigned int)a4 * v144 < (HIDWORD(a4) * v144) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v128) >> 32)\n+ ((v153 * v144) >> 32)\n+ v153 * v128;\nv94 = v233 + v93;\nv53 = (v94 < v233) + v52;\nv95 = *v31 + v94;\nv234 = (v95 < *v31) + v53;\nv11 = v31++;\n*v11 = v95;\nv145 = (unsigned int)*v34;\nv129 = HIDWORD(*v34++);\nv96 = (((unsigned int)a4 * v129) << 32) + ((HIDWORD(a4) * v145) << 32) + (unsigned int)a4 * v145;\nv54 = (v96 < ((unsigned __int64)(unsigned int)a4 * v129) << 32)\n+ (((v153 * v145) << 32) + (unsigned int)a4 * v145 < (HIDWORD(a4) * v145) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v129) >> 32)\n+ ((v153 * v145) >> 32)\n+ v153 * v129;\nv97 = v234 + v96;\nv55 = (v97 < v234) + v54;\nv98 = *v31 + v97;\nv235 = (v98 < *v31) + v55;\nv12 = v31++;\n*v12 = v98;\nv146 = (unsigned int)*v34;\nv130 = HIDWORD(*v34++);\nv99 = (((unsigned int)a4 * v130) << 32) + ((HIDWORD(a4) * v146) << 32) + (unsigned int)a4 * v146;\nv56 = (v99 < ((unsigned __int64)(unsigned int)a4 * v130) << 32)\n+ (((v153 * v146) << 32) + (unsigned int)a4 * v146 < (HIDWORD(a4) * v146) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v130) >> 32)\n+ ((v153 * v146) >> 32)\n+ v153 * v130;\nv100 = v235 + v99;\nv57 = (v100 < v235) + v56;\nv101 = *v31 + v100;\nv236 = (v101 < *v31) + v57;\nv13 = v31++;\n*v13 = v101;\nv147 = (unsigned int)*v34;\nv131 = HIDWORD(*v34++);\nv102 = (((unsigned int)a4 * v131) << 32) + ((HIDWORD(a4) * v147) << 32) + (unsigned int)a4 * v147;\nv58 = (v102 < ((unsigned __int64)(unsigned int)a4 * v131) << 32)\n+ (((v153 * v147) << 32) + (unsigned int)a4 * v147 < (HIDWORD(a4) * v147) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v131) >> 32)\n+ ((v153 * v147) >> 32)\n+ v153 * v131;\nv103 = v236 + v102;\nv59 = (v103 < v236) + v58;\nv104 = *v31 + v103;\nv237 = (v104 < *v31) + v59;\nv14 = v31++;\n*v14 = v104;\nv148 = (unsigned int)*v34;\nv132 = HIDWORD(*v34++);\nv105 = (((unsigned int)a4 * v132) << 32) + ((HIDWORD(a4) * v148) << 32) + (unsigned int)a4 * v148;\nv60 = (v105 < ((unsigned __int64)(unsigned int)a4 * v132) << 32)\n+ (((v153 * v148) << 32) + (unsigned int)a4 * v148 < (HIDWORD(a4) * v148) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v132) >> 32)\n+ ((v153 * v148) >> 32)\n+ v153 * v132;\nv106 = v237 + v105;\nv61 = (v106 < v237) + v60;\nv107 = *v31 + v106;\nv238 = (v107 < *v31) + v61;\nv15 = v31++;\n*v15 = v107;\nv149 = (unsigned int)*v34;\nv133 = HIDWORD(*v34++);\nv108 = (((unsigned int)a4 * v133) << 32) + ((HIDWORD(a4) * v149) << 32) + (unsigned int)a4 * v149;\nv62 = (v108 < ((unsigned __int64)(unsigned int)a4 * v133) << 32)\n+ (((v153 * v149) << 32) + (unsigned int)a4 * v149 < (HIDWORD(a4) * v149) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v133) >> 32)\n+ ((v153 * v149) >> 32)\n+ v153 * v133;\nv109 = v238 + v108;\nv63 = (v109 < v238) + v62;\nv110 = *v31 + v109;\nv239 = (v110 < *v31) + v63;\nv16 = v31++;\n*v16 = v110;\nv150 = (unsigned int)*v34;\nv134 = HIDWORD(*v34++);\nv111 = (((unsigned int)a4 * v134) << 32) + ((HIDWORD(a4) * v150) << 32) + (unsigned int)a4 * v150;\nv64 = (v111 < ((unsigned __int64)(unsigned int)a4 * v134) << 32)\n+ (((v153 * v150) << 32) + (unsigned int)a4 * v150 < (HIDWORD(a4) * v150) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v134) >> 32)\n+ ((v153 * v150) >> 32)\n+ v153 * v134;\nv112 = v239 + v111;\nv65 = (v112 < v239) + v64;\nv113 = *v31 + v112;\nv240 = (v113 < *v31) + v65;\nv17 = v31++;\n*v17 = v113;\nv151 = (unsigned int)*v34;\nv135 = HIDWORD(*v34++);\nv114 = (((unsigned int)a4 * v135) << 32) + ((HIDWORD(a4) * v151) << 32) + (unsigned int)a4 * v151;\nv66 = (v114 < ((unsigned __int64)(unsigned int)a4 * v135) << 32)\n+ (((v153 * v151) << 32) + (unsigned int)a4 * v151 < (HIDWORD(a4) * v151) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v135) >> 32)\n+ ((v153 * v151) >> 32)\n+ v153 * v135;\nv115 = v240 + v114;\nv67 = (v115 < v240) + v66;\nv116 = *v31 + v115;\nv241 = (v116 < *v31) + v67;\nv18 = v31++;\n*v18 = v116;\nv152 = (unsigned int)*v34;\nv136 = HIDWORD(*v34);\na2 = v34 + 1;\nv117 = (((unsigned int)a4 * v136) << 32) + ((HIDWORD(a4) * v152) << 32) + (unsigned int)a4 * v152;\nv68 = (v117 < ((unsigned __int64)(unsigned int)a4 * v136) << 32)\n+ (((v153 * v152) << 32) + (unsigned int)a4 * v152 < (HIDWORD(a4) * v152) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v136) >> 32)\n+ ((v153 * v152) >> 32)\n+ v153 * v136;\nv118 = v241 + v117;\nv69 = (v118 < v241) + v68;\nv119 = *v31 + v118;\nv226 = (v119 < *v31) + v69;\nv19 = v31;\na3 = v31 + 1;\n*v19 = v119;\na1 -= 16;\n}\nwhile ( a1 > 7 )\n{\nv214 = HIDWORD(a4);\nv206 = (unsigned int)*a2;\nv198 = HIDWORD(*a2);\nv35 = a2 + 1;\nv197 = (HIDWORD(a4) * v206) << 32;\nv171 = ((unsigned int)a4 * v198) << 32;\nv172 = v197 + (unsigned int)a4 * v206;\nv154 = (v172 < v197)\n+ (((unsigned __int64)(unsigned int)a4 * v198) >> 32)\n+ ((unsigned __int64)(HIDWORD(a4) * v206) >> 32)\n+ HIDWORD(a4) * v198;\nv173 = v171 + v172;\nv155 = (v173 < v171) + v154;\nv174 = v226 + v173;\nv156 = (v174 < v226) + v155;\nv175 = *a3 + v174;\nv242 = (v175 < *a3) + v156;\nv20 = a3;\nv32 = a3 + 1;\n*v20 = v175;\nv207 = (unsigned int)*v35;\nv199 = HIDWORD(*v35++);\nv176 = (((unsigned int)a4 * v199) << 32) + ((HIDWORD(a4) * v207) << 32) + (unsigned int)a4 * v207;\nv157 = (v176 < ((unsigned __int64)(unsigned int)a4 * v199) << 32)\n+ (((v214 * v207) << 32) + (unsigned int)a4 * v207 < (HIDWORD(a4) * v207) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v199) >> 32)\n+ ((v214 * v207) >> 32)\n+ v214 * v199;\nv177 = v242 + v176;\nv158 = (v177 < v242) + v157;\nv178 = *v32 + v177;\nv243 = (v178 < *v32) + v158;\nv21 = v32++;\n*v21 = v178;\nv208 = (unsigned int)*v35;\nv200 = HIDWORD(*v35++);\nv179 = (((unsigned int)a4 * v200) << 32) + ((HIDWORD(a4) * v208) << 32) + (unsigned int)a4 * v208;\nv159 = (v179 < ((unsigned __int64)(unsigned int)a4 * v200) << 32)\n+ (((v214 * v208) << 32) + (unsigned int)a4 * v208 < (HIDWORD(a4) * v208) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v200) >> 32)\n+ ((v214 * v208) >> 32)\n+ v214 * v200;\nv180 = v243 + v179;\nv160 = (v180 < v243) + v159;\nv181 = *v32 + v180;\nv244 = (v181 < *v32) + v160;\nv22 = v32++;\n*v22 = v181;\nv209 = (unsigned int)*v35;\nv201 = HIDWORD(*v35++);\nv182 = (((unsigned int)a4 * v201) << 32) + ((HIDWORD(a4) * v209) << 32) + (unsigned int)a4 * v209;\nv161 = (v182 < ((unsigned __int64)(unsigned int)a4 * v201) << 32)\n+ (((v214 * v209) << 32) + (unsigned int)a4 * v209 < (HIDWORD(a4) * v209) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v201) >> 32)\n+ ((v214 * v209) >> 32)\n+ v214 * v201;\nv183 = v244 + v182;\nv162 = (v183 < v244) + v161;\nv184 = *v32 + v183;\nv245 = (v184 < *v32) + v162;\nv23 = v32++;\n*v23 = v184;\nv210 = (unsigned int)*v35;\nv202 = HIDWORD(*v35++);\nv185 = (((unsigned int)a4 * v202) << 32) + ((HIDWORD(a4) * v210) << 32) + (unsigned int)a4 * v210;\nv163 = (v185 < ((unsigned __int64)(unsigned int)a4 * v202) << 32)\n+ (((v214 * v210) << 32) + (unsigned int)a4 * v210 < (HIDWORD(a4) * v210) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v202) >> 32)\n+ ((v214 * v210) >> 32)\n+ v214 * v202;\nv186 = v245 + v185;\nv164 = (v186 < v245) + v163;\nv187 = *v32 + v186;\nv246 = (v187 < *v32) + v164;\nv24 = v32++;\n*v24 = v187;\nv211 = (unsigned int)*v35;\nv203 = HIDWORD(*v35++);\nv188 = (((unsigned int)a4 * v203) << 32) + ((HIDWORD(a4) * v211) << 32) + (unsigned int)a4 * v211;\nv165 = (v188 < ((unsigned __int64)(unsigned int)a4 * v203) << 32)\n+ (((v214 * v211) << 32) + (unsigned int)a4 * v211 < (HIDWORD(a4) * v211) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v203) >> 32)\n+ ((v214 * v211) >> 32)\n+ v214 * v203;\nv189 = v246 + v188;\nv166 = (v189 < v246) + v165;\nv190 = *v32 + v189;\nv247 = (v190 < *v32) + v166;\nv25 = v32++;\n*v25 = v190;\nv212 = (unsigned int)*v35;\nv204 = HIDWORD(*v35++);\nv191 = (((unsigned int)a4 * v204) << 32) + ((HIDWORD(a4) * v212) << 32) + (unsigned int)a4 * v212;\nv167 = (v191 < ((unsigned __int64)(unsigned int)a4 * v204) << 32)\n+ (((v214 * v212) << 32) + (unsigned int)a4 * v212 < (HIDWORD(a4) * v212) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v204) >> 32)\n+ ((v214 * v212) >> 32)\n+ v214 * v204;\nv192 = v247 + v191;\nv168 = (v192 < v247) + v167;\nv193 = *v32 + v192;\nv248 = (v193 < *v32) + v168;\nv26 = v32++;\n*v26 = v193;\nv213 = (unsigned int)*v35;\nv205 = HIDWORD(*v35);\na2 = v35 + 1;\nv194 = (((unsigned int)a4 * v205) << 32) + ((HIDWORD(a4) * v213) << 32) + (unsigned int)a4 * v213;\nv169 = (v194 < ((unsigned __int64)(unsigned int)a4 * v205) << 32)\n+ (((v214 * v213) << 32) + (unsigned int)a4 * v213 < (HIDWORD(a4) * v213) << 32)\n+ (((unsigned __int64)(unsigned int)a4 * v205) >> 32)\n+ ((v214 * v213) >> 32)\n+ v214 * v205;\nv195 = v248 + v194;\nv170 = (v195 < v248) + v169;\nv196 = *v32 + v195;\nv226 = (v196 < *v32) + v170;\nv27 = v32;\na3 = v32 + 1;\n*v27 = v196;\na1 -= 8;\n}\nwhile ( a1 > 0 )\n{\nv225 = (unsigned int)*a2;\nv224 = HIDWORD(*a2++);\nv223 = (HIDWORD(a4) * v225) << 32;\nv218 = ((unsigned int)a4 * v224) << 32;\nv219 = v223 + (unsigned int)a4 * v225;\nv215 = (v219 < v223)\n+ (((unsigned __int64)(unsigned int)a4 * v224) >> 32)\n+ ((unsigned __int64)(HIDWORD(a4) * v225) >> 32)\n+ HIDWORD(a4) * v224;\nv220 = v218 + v219;\nv216 = (v220 < v218) + v215;\nv221 = v226 + v220;\nv217 = (v221 < v226) + v216;\nv222 = *a3 + v221;\nv226 = (v222 < *a3) + v217;\nv28 = a3++;\n*v28 = v222;\n--a1;\n}\ndo\n{\n*a3 += v226;\nresult = v226 > *a3;\nv226 = result;\n++a3;\n}\nwhile ( result );\nreturn result;\n}"
    },
    {
        "addr": 4252019,
        "funname": "sub_40E173",
        "code": "__int64 __fastcall sub_40E173(__int64 a1, __int64 a2, char *a3, __int64 a4, __int64 a5, __int64 a6)\n{\n__int64 v6; // r8\n__int64 v7; // r9\nchar *v10; // [rsp+10h] [rbp-40h]\nchar v11[16]; // [rsp+20h] [rbp-30h] BYREF\nchar v12[20]; // [rsp+30h] [rbp-20h] BYREF\nint j; // [rsp+44h] [rbp-Ch]\nint i; // [rsp+48h] [rbp-8h]\nunsigned int v15; // [rsp+4Ch] [rbp-4h]\n\nv10 = (char *)a2;\nsub_409F81((__int64)v12, (__int64)v11, 0LL, (__int64)v11, a5, a6);\nif ( a1 == a2 )\n{\nv15 = sub_40A2C2((__int64)v12, a2);\nif ( v15 )\ngoto LABEL_21;\nv10 = v12;\n}\nif ( (char *)a1 == a3 )\n{\nv15 = sub_40A2C2((__int64)v11, (__int64)a3);\nif ( v15 )\ngoto LABEL_21;\na3 = v11;\n}\nfor ( i = *((_DWORD *)v10 + 1) - 1; i >= 0 && !*(_QWORD *)(*((_QWORD *)v10 + 1) + 8LL * i); --i )\n;\nfor ( j = *((_DWORD *)a3 + 1) - 1; j >= 0 && !*(_QWORD *)(*((_QWORD *)a3 + 1) + 8LL * j); --j )\n;\nv15 = sub_40A1E4(a1, i + j + 2);\nif ( !v15 )\n{\nv15 = sub_40A3E1(a1, 0);\nif ( !v15 )\n{\n++i;\nwhile ( j >= 0 )\n{\nsub_40BCD2(\ni,\n*((_QWORD **)v10 + 1),\n(unsigned __int64 *)(*(_QWORD *)(a1 + 8) + 8LL * j),\n*(_QWORD *)(*((_QWORD *)a3 + 1) + 8LL * j));\n--j;\n}\n*(_DWORD *)a1 = *(_DWORD *)a3 * *(_DWORD *)v10;\n}\n}\nLABEL_21:\nsub_40A088((__int64)v11, (__int64)v12, 0LL, (__int64)v12, v6, v7);\nreturn v15;\n}"
    },
    {
        "addr": 4252570,
        "funname": "sub_40E39A",
        "code": "__int64 __fastcall sub_40E39A(_DWORD *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)\n{\n_QWORD *v5; // rax\n_QWORD *v6; // rax\n__int64 v7; // r8\n__int64 v8; // r9\n__int64 v9; // rax\n__int64 v10; // rax\n__int64 v11; // rax\n__int64 v12; // r8\n__int64 v13; // r9\n_QWORD *v14; // rax\nchar v17[8]; // [rsp+20h] [rbp-B0h] BYREF\n_QWORD *v18; // [rsp+28h] [rbp-A8h]\nunsigned int v19; // [rsp+30h] [rbp-A0h] BYREF\n__int64 *v20; // [rsp+38h] [rbp-98h]\nchar v21[8]; // [rsp+40h] [rbp-90h] BYREF\n__int64 v22; // [rsp+48h] [rbp-88h]\nint v23; // [rsp+50h] [rbp-80h] BYREF\nint v24; // [rsp+54h] [rbp-7Ch]\n__int64 v25; // [rsp+58h] [rbp-78h]\nint v26; // [rsp+60h] [rbp-70h] BYREF\nint v27; // [rsp+64h] [rbp-6Ch]\n__int64 v28; // [rsp+68h] [rbp-68h]\nunsigned __int64 v29; // [rsp+78h] [rbp-58h]\nunsigned __int64 v30; // [rsp+80h] [rbp-50h]\n__int64 v31; // [rsp+88h] [rbp-48h]\nunsigned __int64 v32; // [rsp+90h] [rbp-40h]\nint v33; // [rsp+98h] [rbp-38h]\nint v34; // [rsp+9Ch] [rbp-34h]\nunsigned __int64 v35; // [rsp+A0h] [rbp-30h]\nunsigned __int64 v36; // [rsp+A8h] [rbp-28h]\nunsigned __int64 v37; // [rsp+B0h] [rbp-20h]\nunsigned __int64 v38; // [rsp+B8h] [rbp-18h]\nint v39; // [rsp+C4h] [rbp-Ch]\nint v40; // [rsp+C8h] [rbp-8h]\nunsigned int v41; // [rsp+CCh] [rbp-4h]\n\nif ( !(unsigned int)sub_40B627(a4, 0) )\nreturn 4294967284LL;\nsub_409F81((__int64)&v26, (__int64)&v23, (__int64)v21, (__int64)&v19, (__int64)v17, 0LL);\nif ( (int)sub_40B35D((__int64)a3, (__int64)a4) >= 0 )\n{\nv41 = sub_40A2C2((__int64)&v26, (__int64)a3);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40A2C2((__int64)&v23, (__int64)a4);\nif ( v41 )\ngoto LABEL_66;\nv23 = 1;\nv26 = 1;\nv41 = sub_40A1E4((__int64)v21, a3[1] + 2);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40A3E1((__int64)v21, 0);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40A1E4((__int64)&v19, 2);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40A1E4((__int64)v17, 3);\nif ( v41 )\ngoto LABEL_66;\nv39 = (int)sub_40A4D9((__int64)&v23) % 64;\nif ( v39 > 62 )\n{\nv39 = 0;\n}\nelse\n{\nv39 = 63 - v39;\nv41 = sub_40B007((__int64)&v26, v39);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40B007((__int64)&v23, v39);\nif ( v41 )\ngoto LABEL_66;\n}\nv34 = v27 - 1;\nv33 = v24 - 1;\nsub_40B007((__int64)&v23, (v27 - v24) << 6);\nwhile ( (int)sub_40B49C((unsigned int *)&v26, (__int64)&v23) >= 0 )\n{\n++*(_QWORD *)(v22 + 8LL * (v34 - v33));\nsub_40BB38(&v26, &v26, &v23);\n}\nsub_40B1DD((__int64)&v23, (v34 - v33) << 6);\nv40 = v34;\nwhile ( 2 )\n{\nif ( v40 <= v33 )\n{\nif ( a1 )\n{\nsub_40A2C2((__int64)a1, (__int64)v21);\n*a1 = *a4 * *a3;\n}\nif ( a2 )\n{\nsub_40B1DD((__int64)&v26, v39);\nsub_40A2C2((__int64)a2, (__int64)&v26);\n*a2 = *a3;\nif ( !(unsigned int)sub_40B627(a2, 0) )\n*a2 = 1;\n}\ngoto LABEL_66;\n}\nif ( *(_QWORD *)(v28 + 8LL * v40) < *(_QWORD *)(v25 + 8LL * v33) )\n{\nv32 = *(_QWORD *)(v25 + 8LL * v33);\nv31 = (unsigned int)v32;\nv30 = HIDWORD(v32);\nv37 = *(_QWORD *)(v28 + 8LL * v40) / HIDWORD(v32);\nv35 = *(_QWORD *)(v28 + 8LL * v40) - v37 * HIDWORD(v32);\nv35 <<= 32;\nv35 |= HIDWORD(*(_QWORD *)(v28 + 8LL * v40 - 8));\nv29 = (unsigned int)v32 * v37;\nif ( v35 < v29 )\n{\n--v37;\nfor ( v35 += v32; v35 >= v32 && v35 < v29; v35 += v32 )\n--v37;\n}\nv35 -= v29;\nv38 = v35 / v30;\nv36 = v35 - v35 / v30 * v30;\nv36 <<= 32;\nv36 |= (unsigned int)*(_QWORD *)(v28 + 8LL * v40 - 8);\nv29 = v31 * (v35 / v30);\nif ( v36 < v29 )\n{\n--v38;\nfor ( v36 += v32; v36 >= v32 && v36 < v29; v36 += v32 )\n--v38;\n}\nv36 -= v29;\n*(_QWORD *)(8LL * (v40 - v33) - 8 + v22) = v38 | (v37 << 32);\n}\nelse\n{\n*(_QWORD *)(v22 + 8LL * (v40 - v33) - 8) = -1LL;\n}\nv5 = (_QWORD *)(v22 + 8LL * (v40 - v33) - 8);\n++*v5;\ndo\n{\nv6 = (_QWORD *)(v22 + 8LL * (v40 - v33) - 8);\n--*v6;\nv41 = sub_40A3E1((__int64)&v19, 0);\nif ( v41 )\ngoto LABEL_66;\nv9 = v33 <= 0 ? 0LL : *(_QWORD *)(v25 + 8LL * v33 - 8);\n*v20 = v9;\nv20[1] = *(_QWORD *)(v25 + 8LL * v33);\nv41 = sub_40E34F((__int64)&v19, (__int64)&v19, *(_QWORD *)(v22 + 8LL * (v40 - v33) - 8), (__int64)&v19, v7, v8);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40A3E1((__int64)v17, 0);\nif ( v41 )\ngoto LABEL_66;\nif ( v40 <= 1 )\nv10 = 0LL;\nelse\nv10 = *(_QWORD *)(v28 + 8LL * v40 - 16);\n*v18 = v10;\nif ( v40 <= 0 )\nv11 = 0LL;\nelse\nv11 = *(_QWORD *)(v28 + 8LL * v40 - 8);\nv18[1] = v11;\nv18[2] = *(_QWORD *)(v28 + 8LL * v40);\n}\nwhile ( (int)sub_40B49C(&v19, (__int64)v17) > 0 );\nv41 = sub_40E34F((__int64)&v19, (__int64)&v23, *(_QWORD *)(v22 + 8LL * (v40 - v33) - 8), (__int64)&v23, v12, v13);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40B007((__int64)&v19, (v40 - v33 - 1) << 6);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40BB38(&v26, &v26, &v19);\nif ( v41 )\ngoto LABEL_66;\nif ( (int)sub_40B627((unsigned int *)&v26, 0) < 0 )\n{\nv41 = sub_40A2C2((__int64)&v19, (__int64)&v23);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40B007((__int64)&v19, (v40 - v33 - 1) << 6);\nif ( v41 )\ngoto LABEL_66;\nv41 = sub_40BA60(&v26, &v26, &v19);\nif ( v41 )\ngoto LABEL_66;\nv14 = (_QWORD *)(v22 + 8LL * (v40 - v33) - 8);\n--*v14;\n}\n--v40;\ncontinue;\n}\n}\nif ( !a1 || (v41 = sub_40A3E1((__int64)a1, 0)) == 0 )\n{\nif ( !a2 )\nreturn 0LL;\nv41 = sub_40A2C2((__int64)a2, (__int64)a3);\nif ( !v41 )\nreturn 0LL;\n}\nLABEL_66:\nsub_40A088((__int64)&v26, (__int64)&v23, (__int64)v21, (__int64)&v19, (__int64)v17, 0LL, a4);\nreturn v41;\n}"
    },
    {
        "addr": 4255189,
        "funname": "sub_40EDD5",
        "code": "__int64 __fastcall sub_40EDD5(__int64 *a1, __int64 a2, int a3)\n{\n__int64 result; // rax\nint v4; // [rsp+0h] [rbp-34h]\n__int128 v5; // [rsp+1Ch] [rbp-18h]\nint v6; // [rsp+30h] [rbp-4h]\n\nv4 = a3;\nif ( !a3 )\nreturn 4294967284LL;\nif ( a3 < 0 )\nv4 = -a3;\nif ( v4 == 1 )\n{\n*a1 = 0LL;\nresult = 0LL;\n}\nelse if ( v4 == 2 )\n{\n*a1 = **(_QWORD **)(a2 + 8) & 1LL;\nresult = 0LL;\n}\nelse\n{\nv6 = *(_DWORD *)(a2 + 4) - 1;\n*((_QWORD *)&v5 + 1) = 0LL;\nwhile ( v6 >= 0 )\n{\n*(_QWORD *)&v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8LL * v6);\n*((_QWORD *)&v5 + 1) = (v5 >> 32) - (unsigned __int64)(v5 >> 32) / v4 * v4;\n*(_QWORD *)&v5 = (_QWORD)v5 << 32;\n*((_QWORD *)&v5 + 1) = (v5 >> 32) - (unsigned __int64)(v5 >> 32) / v4 * v4;\n--v6;\n}\n*a1 = *((_QWORD *)&v5 + 1);\nresult = 0LL;\n}\nreturn result;\n}"
    },
    {
        "addr": 4255699,
        "funname": "sub_40EFD3",
        "code": "__int64 __fastcall sub_40EFD3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\nint v5; // eax\nunsigned __int64 *v6; // rax\n__int64 result; // rax\nunsigned __int64 v11; // [rsp+38h] [rbp-28h]\nunsigned __int64 v12; // [rsp+40h] [rbp-20h]\nint v13; // [rsp+48h] [rbp-18h]\nint v14; // [rsp+4Ch] [rbp-14h]\nunsigned __int64 *src; // [rsp+50h] [rbp-10h]\nint i; // [rsp+5Ch] [rbp-4h]\n\nmemset(*(void **)(a5 + 8), 0, 8 * *(_DWORD *)(a5 + 4));\nsrc = *(unsigned __int64 **)(a5 + 8);\nv14 = *(_DWORD *)(a3 + 4);\nv5 = *(_DWORD *)(a2 + 4);\nif ( v14 <= v5 )\nv5 = *(_DWORD *)(a3 + 4);\nv13 = v5;\nfor ( i = 0; i < v14; ++i )\n{\nv12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL * i);\nv11 = (v12 * **(_QWORD **)(a2 + 8) + *src) * a4;\nsub_40BCD2(v13, *(_QWORD **)(a2 + 8), src, v12);\nsub_40BCD2(v14, *(_QWORD **)(a3 + 8), src, v11);\nv6 = src++;\n*v6 = v12;\nsrc[v14 + 1] = 0LL;\n}\nmemcpy(*(void **)(a1 + 8), src, 8 * (v14 + 1));\nif ( (int)sub_40B35D(a1, a3) < 0 )\nresult = sub_40B85B(v14, *(unsigned __int64 **)(a1 + 8), *(unsigned __int64 **)(a5 + 8));\nelse\nresult = sub_40B85B(v14, *(unsigned __int64 **)(a3 + 8), *(unsigned __int64 **)(a1 + 8));\nreturn result;\n}"
    },
    {
        "addr": 4256203,
        "funname": "sub_40F1CB",
        "code": "__int64 __fastcall sub_40F1CB(__int64 a1, unsigned int *a2, __int64 a3, __int64 a4, __int64 *a5)\n{\n__int64 v6; // r8\n__int64 v7; // r9\nint v8; // eax\n__int64 v9; // r8\n__int64 v10; // r9\n__int64 v11; // rdx\n__int64 v12; // rdx\nchar s[16]; // [rsp+30h] [rbp-460h] BYREF\nunsigned int v18[252]; // [rsp+40h] [rbp-450h] BYREF\nchar v19[16]; // [rsp+430h] [rbp-60h] BYREF\n__int64 v20; // [rsp+440h] [rbp-50h] BYREF\n__int64 v21; // [rsp+448h] [rbp-48h]\n__int64 v22; // [rsp+458h] [rbp-38h] BYREF\n__int64 v23; // [rsp+460h] [rbp-30h]\nint v24; // [rsp+468h] [rbp-28h]\nint v25; // [rsp+46Ch] [rbp-24h]\n__int64 v26; // [rsp+470h] [rbp-20h]\nint v27; // [rsp+478h] [rbp-18h]\nint v28; // [rsp+47Ch] [rbp-14h]\nint v29; // [rsp+480h] [rbp-10h]\nint v30; // [rsp+484h] [rbp-Ch]\nint i; // [rsp+488h] [rbp-8h]\nunsigned int v32; // [rsp+48Ch] [rbp-4h]\n\nif ( (int)sub_40B627((unsigned int *)a4, 0) < 0 || (**(_QWORD **)(a4 + 8) & 1LL) == 0 )\nreturn 4294967292LL;\nsub_40EF16(&v22, a4);\nsub_409F81((__int64)&v20, (__int64)v19, 0LL, (__int64)v19, v6, v7);\nmemset(s, 0, 0x400uLL);\ni = sub_40A4D9(a3);\nif ( i > 671 )\n{\nv8 = 6;\n}\nelse if ( i > 239 )\n{\nv8 = 5;\n}\nelse if ( i > 79 )\n{\nv8 = 4;\n}\nelse if ( i <= 23 )\n{\nv8 = 1;\n}\nelse\n{\nv8 = 3;\n}\nv25 = v8;\nv24 = *(_DWORD *)(a4 + 4) + 1;\nv32 = sub_40A1E4(a1, v24);\nif ( !v32 )\n{\nv32 = sub_40A1E4((__int64)v18, v24);\nif ( !v32 )\n{\nv32 = sub_40A1E4((__int64)v19, 2 * v24);\nif ( !v32 )\n{\nif ( a5 && a5[1] )\n{\nv12 = a5[1];\nv20 = *a5;\nv21 = v12;\n}\nelse\n{\nv32 = sub_40A3E1((__int64)&v20, 1);\nif ( v32 )\ngoto LABEL_60;\nv32 = sub_40B007((__int64)&v20, *(_DWORD *)(a4 + 4) << 7);\nif ( v32 )\ngoto LABEL_60;\nv32 = sub_40ED21((unsigned int *)&v20, (unsigned int *)&v20, (unsigned int *)a4);\nif ( v32 )\ngoto LABEL_60;\nif ( a5 )\n{\nv11 = v21;\n*a5 = v20;\na5[1] = v11;\n}\n}\nif ( (int)sub_40B49C(a2, a4) < 0 )\nsub_40A2C2((__int64)v18, (__int64)a2);\nelse\nsub_40ED21(v18, a2, (unsigned int *)a4);\nsub_40EFD3((__int64)v18, (__int64)&v20, a4, v22, (__int64)v19);\nv32 = sub_40A2C2(a1, (__int64)&v20);\nif ( !v32 )\n{\nsub_40F174(a1, a4, v22, (__int64)v19);\nif ( v25 > 1 )\n{\nv24 = 1 << (v25 - 1);\nv32 = sub_40A1E4((__int64)&s[16 * v24], *(_DWORD *)(a4 + 4) + 1);\nif ( v32 )\ngoto LABEL_60;\nv32 = sub_40A2C2((__int64)&s[16 * v24], (__int64)v18);\nif ( v32 )\ngoto LABEL_60;\nfor ( i = 0; i < v25 - 1; ++i )\nsub_40EFD3((__int64)&s[16 * v24], (__int64)&s[16 * v24], a4, v22, (__int64)v19);\nfor ( i = v24 + 1; i < 1 << v25; ++i )\n{\nv32 = sub_40A1E4((__int64)&s[16 * i], *(_DWORD *)(a4 + 4) + 1);\nif ( v32 )\ngoto LABEL_60;\nv32 = sub_40A2C2((__int64)&s[16 * i], (__int64)&s[16 * i - 16]);\nif ( v32 )\ngoto LABEL_60;\nsub_40EFD3((__int64)&s[16 * i], (__int64)v18, a4, v22, (__int64)v19);\n}\n}\nv28 = *(_DWORD *)(a3 + 4);\nv29 = 0;\nv27 = 0;\nv30 = 0;\nv26 = 0LL;\nwhile ( 1 )\n{\nif ( !v29 )\n{\nif ( !v28-- )\n{\nfor ( i = 0; i < v27; ++i )\n{\nsub_40EFD3(a1, a1, a4, v22, (__int64)v19);\nv30 *= 2;\nif ( ((v30 >> v25) & 1) != 0 )\nsub_40EFD3(a1, (__int64)v18, a4, v22, (__int64)v19);\n}\nsub_40F174(a1, a4, v22, (__int64)v19);\nbreak;\n}\nv29 = 64;\n}\nv23 = (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8LL * v28) >> --v29) & 1LL;\nif ( v23 || v26 )\n{\nif ( v23 || v26 != 1 )\n{\nv26 = 2LL;\nv30 |= v23 << ((unsigned __int8)v25 - (unsigned __int8)++v27);\nif ( v27 == v25 )\n{\nfor ( i = 0; i < v25; ++i )\nsub_40EFD3(a1, a1, a4, v22, (__int64)v19);\nsub_40EFD3(a1, (__int64)&s[16 * v30], a4, v22, (__int64)v19);\n--v26;\nv27 = 0;\nv30 = 0;\n}\n}\nelse\n{\nsub_40EFD3(a1, a1, a4, v22, (__int64)v19);\n}\n}\n}\n}\n}\n}\n}\nLABEL_60:\nfor ( i = 1 << (v25 - 1); i < 1 << v25; ++i )\nsub_40A088((__int64)&s[16 * i], 0LL, (__int64)s, (unsigned int)v25, v9, v10);\nif ( a5 )\nsub_40A088((__int64)v18, (__int64)v19, 0LL, (__int64)v18, v9, v10);\nelse\nsub_40A088((__int64)v18, (__int64)v19, (__int64)&v20, 0LL, v9, v10);\nreturn v32;\n}"
    },
    {
        "addr": 4258186,
        "funname": "sub_40F98A",
        "code": "__int64 __fastcall sub_40F98A(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n__int64 v6; // r8\n__int64 v7; // r9\nint v8; // eax\nint v9; // eax\nint v12[4]; // [rsp+20h] [rbp-40h] BYREF\nunsigned int v13[4]; // [rsp+30h] [rbp-30h] BYREF\nchar v14[20]; // [rsp+40h] [rbp-20h] BYREF\nint v15; // [rsp+54h] [rbp-Ch]\nint v16; // [rsp+58h] [rbp-8h]\nunsigned int v17; // [rsp+5Ch] [rbp-4h]\n\nsub_409F81((__int64)v14, (__int64)v13, (__int64)v12, 0LL, a5, a6);\nv17 = sub_40A2C2((__int64)v13, a2);\nif ( !v17 )\n{\nv17 = sub_40A2C2((__int64)v12, a3);\nif ( !v17 )\n{\nv16 = sub_40A464((__int64)v13);\nv15 = sub_40A464((__int64)v12);\nif ( v15 < v16 )\nv16 = v15;\nv17 = sub_40B1DD((__int64)v13, v16);\nif ( !v17 )\n{\nv17 = sub_40B1DD((__int64)v12, v16);\nif ( !v17 )\n{\nv12[0] = 1;\nv13[0] = 1;\nwhile ( (unsigned int)sub_40B627(v13, 0) )\n{\nv8 = sub_40A464((__int64)v13);\nv17 = sub_40B1DD((__int64)v13, v8);\nif ( v17 )\ngoto LABEL_19;\nv9 = sub_40A464((__int64)v12);\nv17 = sub_40B1DD((__int64)v12, v9);\nif ( v17 )\ngoto LABEL_19;\nif ( (int)sub_40B49C(v13, (__int64)v12) < 0 )\n{\nv17 = sub_40B93D((__int64)v12, (__int64)v12, (__int64)v13);\nif ( v17 )\ngoto LABEL_19;\nv17 = sub_40B1DD((__int64)v12, 1);\nif ( v17 )\ngoto LABEL_19;\n}\nelse\n{\nv17 = sub_40B93D((__int64)v13, (__int64)v13, (__int64)v12);\nif ( v17 )\ngoto LABEL_19;\nv17 = sub_40B1DD((__int64)v13, 1);\nif ( v17 )\ngoto LABEL_19;\n}\n}\nv17 = sub_40B007((__int64)v12, v16);\nif ( !v17 )\nv17 = sub_40A2C2(a1, (__int64)v12);\n}\n}\n}\n}\nLABEL_19:\nsub_40A088((__int64)v12, (__int64)v13, (__int64)v14, 0LL, v6, v7);\nreturn v17;\n}"
    },
    {
        "addr": 4258794,
        "funname": "sub_40FBEA",
        "code": "__int64 __fastcall sub_40FBEA(__int64 a1, unsigned int *a2, unsigned int *a3)\n{\n__int64 v4; // r8\n__int64 v5; // r9\nint v7; // [rsp+20h] [rbp-A0h] BYREF\n_QWORD *v8; // [rsp+28h] [rbp-98h]\nint v9; // [rsp+30h] [rbp-90h] BYREF\n_QWORD *v10; // [rsp+38h] [rbp-88h]\nint v11; // [rsp+40h] [rbp-80h] BYREF\n_QWORD *v12; // [rsp+48h] [rbp-78h]\n_DWORD v13[4]; // [rsp+50h] [rbp-70h] BYREF\nint v14; // [rsp+60h] [rbp-60h] BYREF\n_QWORD *v15; // [rsp+68h] [rbp-58h]\nint v16; // [rsp+70h] [rbp-50h] BYREF\n_QWORD *v17; // [rsp+78h] [rbp-48h]\nint v18; // [rsp+80h] [rbp-40h] BYREF\n_QWORD *v19; // [rsp+88h] [rbp-38h]\nunsigned int v20[4]; // [rsp+90h] [rbp-30h] BYREF\nunsigned int v21[7]; // [rsp+A0h] [rbp-20h] BYREF\nunsigned int v22; // [rsp+BCh] [rbp-4h]\n\nif ( (int)sub_40B627(a3, 0) <= 0 )\nreturn 4294967292LL;\nsub_409F81((__int64)v20, (__int64)&v18, (__int64)&v16, (__int64)&v14, (__int64)v21, (__int64)v13, &v11, &v9, &v7, 0LL);\nv22 = sub_40F98A((__int64)v21, (__int64)a2, (__int64)a3, (__int64)a2, v4, v5);\nif ( !v22 )\n{\nif ( (unsigned int)sub_40B627(v21, 1) )\n{\nv22 = -14;\n}\nelse\n{\nv22 = sub_40ED21(v20, a2, a3);\nif ( !v22 )\n{\nv22 = sub_40A2C2((__int64)&v18, (__int64)v20);\nif ( !v22 )\n{\nv22 = sub_40A2C2((__int64)v13, (__int64)a3);\nif ( !v22 )\n{\nv22 = sub_40A2C2((__int64)&v11, (__int64)a3);\nif ( !v22 )\n{\nv22 = sub_40A3E1((__int64)&v16, 1);\nif ( !v22 )\n{\nv22 = sub_40A3E1((__int64)&v14, 0);\nif ( !v22 )\n{\nv22 = sub_40A3E1((__int64)&v9, 0);\nif ( !v22 )\n{\nv22 = sub_40A3E1((__int64)&v7, 1);\nif ( !v22 )\n{\ndo\n{\nwhile ( (*v19 & 1LL) == 0 )\n{\nv22 = sub_40B1DD((__int64)&v18, 1);\nif ( !v22\n&& ((*v17 & 1LL) == 0 && (*v15 & 1LL) == 0\n|| (v22 = sub_40BA60(&v16, &v16, v13)) == 0 && (v22 = sub_40BB38(&v14, &v14, v20)) == 0) )\n{\nv22 = sub_40B1DD((__int64)&v16, 1);\nif ( !v22 )\n{\nv22 = sub_40B1DD((__int64)&v14, 1);\nif ( !v22 )\ncontinue;\n}\n}\ngoto LABEL_48;\n}\nwhile ( (*v12 & 1LL) == 0 )\n{\nv22 = sub_40B1DD((__int64)&v11, 1);\nif ( !v22\n&& ((*v10 & 1LL) == 0 && (*v8 & 1LL) == 0\n|| (v22 = sub_40BA60(&v9, &v9, v13)) == 0 && (v22 = sub_40BB38(&v7, &v7, v20)) == 0) )\n{\nv22 = sub_40B1DD((__int64)&v9, 1);\nif ( !v22 )\n{\nv22 = sub_40B1DD((__int64)&v7, 1);\nif ( !v22 )\ncontinue;\n}\n}\ngoto LABEL_48;\n}\nif ( (int)sub_40B49C((unsigned int *)&v18, (__int64)&v11) < 0 )\n{\nv22 = sub_40BB38(&v11, &v11, &v18);\nif ( v22 )\ngoto LABEL_48;\nv22 = sub_40BB38(&v9, &v9, &v16);\nif ( v22 )\ngoto LABEL_48;\nv22 = sub_40BB38(&v7, &v7, &v14);\nif ( v22 )\ngoto LABEL_48;\n}\nelse\n{\nv22 = sub_40BB38(&v18, &v18, &v11);\nif ( v22 )\ngoto LABEL_48;\nv22 = sub_40BB38(&v16, &v16, &v9);\nif ( v22 )\ngoto LABEL_48;\nv22 = sub_40BB38(&v14, &v14, &v7);\nif ( v22 )\ngoto LABEL_48;\n}\n}\nwhile ( (unsigned int)sub_40B627((unsigned int *)&v18, 0) );\nwhile ( (int)sub_40B627((unsigned int *)&v9, 0) < 0 )\n{\nv22 = sub_40BA60(&v9, &v9, a3);\nif ( v22 )\ngoto LABEL_48;\n}\nwhile ( (int)sub_40B49C((unsigned int *)&v9, (__int64)a3) >= 0 )\n{\nv22 = sub_40BB38(&v9, &v9, a3);\nif ( v22 )\ngoto LABEL_48;\n}\nv22 = sub_40A2C2(a1, (__int64)&v9);\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\nLABEL_48:\nsub_40A088((__int64)&v7, (__int64)&v9, (__int64)&v11, (__int64)v13, (__int64)v21, (__int64)&v14, &v16, &v18, v20, 0LL);\nreturn v22;\n}"
    },
    {
        "addr": 4260334,
        "funname": "sub_4101EE",
        "code": "__int64 __fastcall sub_4101EE(__int64 a1, __int64 (__fastcall *a2)(__int64), __int64 a3)\n{\nint v4; // eax\nchar v5; // cl\n_BYTE *v6; // rax\nint v7; // ebx\n__int64 v8; // r8\n__int64 v9; // r9\n__int64 v11; // [rsp+28h] [rbp-98h] BYREF\n__int64 v12[2]; // [rsp+30h] [rbp-90h] BYREF\nunsigned int v13[2]; // [rsp+40h] [rbp-80h] BYREF\n_QWORD *v14; // [rsp+48h] [rbp-78h]\nunsigned int v15[4]; // [rsp+50h] [rbp-70h] BYREF\nchar v16[16]; // [rsp+60h] [rbp-60h] BYREF\n_DWORD v17[7]; // [rsp+70h] [rbp-50h] BYREF\nint v18; // [rsp+8Ch] [rbp-34h]\nint v19; // [rsp+90h] [rbp-30h]\nunsigned int v20; // [rsp+94h] [rbp-2Ch]\n_QWORD *v21; // [rsp+98h] [rbp-28h]\nint j; // [rsp+A4h] [rbp-1Ch]\nint i; // [rsp+A8h] [rbp-18h]\nunsigned int v24; // [rsp+ACh] [rbp-14h]\n\nif ( !(unsigned int)sub_40B627((unsigned int *)a1, 0) )\nreturn 0LL;\nsub_409F81((__int64)v17, (__int64)v16, (__int64)v15, (__int64)v13, (__int64)v12, 0LL);\nv20 = *(_DWORD *)a1;\n*(_DWORD *)a1 = 1;\nif ( (**(_QWORD **)(a1 + 8) & 1LL) == 0 )\nreturn 4294967282LL;\nfor ( i = 0; dword_411BE0[i] > 0; ++i )\n{\nif ( (int)sub_40B627((unsigned int *)a1, dword_411BE0[i]) <= 0 )\nreturn 0LL;\nv24 = sub_40EDD5(&v11, a1, dword_411BE0[i]);\nif ( v24 )\ngoto LABEL_50;\nif ( !v11 )\nreturn 4294967282LL;\n}\nv19 = sub_40A464((__int64)v17);\nv24 = sub_40BC71(v17, (int *)a1, 1);\nif ( !v24 )\n{\nv24 = sub_40A2C2((__int64)v16, (__int64)v17);\nif ( !v24 )\n{\nv24 = sub_40B1DD((__int64)v16, v19);\nif ( !v24 )\n{\ni = sub_40A4D9(a1);\nif ( i > 1299 )\n{\nv4 = 2;\n}\nelse if ( i > 849 )\n{\nv4 = 3;\n}\nelse if ( i > 649 )\n{\nv4 = 4;\n}\nelse if ( i > 349 )\n{\nv4 = 8;\n}\nelse if ( i > 249 )\n{\nv4 = 12;\n}\nelse if ( i <= 149 )\n{\nv4 = 27;\n}\nelse\n{\nv4 = 18;\n}\nv18 = v4;\nfor ( i = 0; i < v18; ++i )\n{\nv24 = sub_40A1E4((__int64)v13, *(_DWORD *)(a1 + 4));\nif ( v24 )\nbreak;\nv21 = v14;\nfor ( j = 0; j < (signed int)(8 * v13[1]); ++j )\n{\nv5 = a2(a3);\nv6 = v21;\nv21 = (_QWORD *)((char *)v21 + 1);\n*v6 = v5;\n}\nv7 = sub_40A4D9((__int64)v13);\nj = v7 - sub_40A4D9((__int64)v17);\nv24 = sub_40B1DD((__int64)v13, j + 1);\nif ( v24 )\nbreak;\n*v14 |= 3uLL;\nv24 = sub_40F1CB((__int64)v13, v13, (__int64)v16, a1, v12);\nif ( v24 )\nbreak;\nif ( (unsigned int)sub_40B49C(v13, (__int64)v17) && (unsigned int)sub_40B627(v13, 1) )\n{\nfor ( j = 1; j < v19 && (unsigned int)sub_40B49C(v13, (__int64)v17); ++j )\n{\nv24 = sub_40E173((__int64)v15, (__int64)v13, (char *)v13, (__int64)v13, v8, v9);\nif ( v24 )\ngoto LABEL_50;\nv24 = sub_40ED21(v13, v15, (unsigned int *)a1);\nif ( v24 )\ngoto LABEL_50;\nif ( !(unsigned int)sub_40B627(v13, 1) )\nbreak;\n}\nif ( (unsigned int)sub_40B49C(v13, (__int64)v17) || !(unsigned int)sub_40B627(v13, 1) )\n{\nv24 = -14;\nbreak;\n}\n}\n}\n}\n}\n}\nLABEL_50:\n*(_DWORD *)a1 = v20;\nsub_40A088((__int64)v12, (__int64)v13, (__int64)v15, (__int64)v16, (__int64)v17, 0LL);\nreturn v24;\n}"
    },
    {
        "addr": 4261506,
        "funname": "sub_410682",
        "code": "__int64 __fastcall sub_410682(__int64 a1, int a2, __int64 a3, __int64 (__fastcall *a4)(__int64), __int64 a5, __int64 a6)\n{\nint v7; // eax\n__int64 v8; // rdx\n__int64 v9; // rcx\n__int64 v10; // r8\n__int64 v11; // r9\nchar v12; // cl\n_BYTE *v13; // rax\nint v16; // [rsp+10h] [rbp-40h]\n_DWORD v17[8]; // [rsp+20h] [rbp-30h] BYREF\n_BYTE *v18; // [rsp+40h] [rbp-10h]\nint i; // [rsp+48h] [rbp-8h]\nunsigned int j; // [rsp+4Ch] [rbp-4h]\n\nv16 = a3;\nif ( a2 <= 2 )\nreturn 4294967292LL;\nsub_409F81((__int64)v17, 0LL, a3, (__int64)a4, a5, a6);\nv7 = a2 + 63;\nif ( a2 + 63 < 0 )\nv7 = a2 + 126;\nv17[7] = v7 >> 6;\nj = sub_40A1E4(a1, v7 >> 6);\nif ( !j )\n{\nj = sub_40A3E1(a1, 0);\nif ( !j )\n{\nv18 = *(_BYTE **)(a1 + 8);\nfor ( i = 0; i < 8 * *(_DWORD *)(a1 + 4); ++i )\n{\nv12 = a4(a5);\nv13 = v18++;\n*v13 = v12;\n}\ni = sub_40A4D9(a1);\nif ( (i >= a2 || (j = sub_40B007(a1, a2 - i)) == 0) && (i <= a2 || (j = sub_40B1DD(a1, i - a2)) == 0) )\n{\n**(_QWORD **)(a1 + 8) |= 3uLL;\nif ( v16 )\n{\nj = sub_40BC71(v17, (int *)a1, 1);\nif ( !j )\n{\nfor ( j = sub_40B1DD((__int64)v17, 1); !j; j = sub_40B1DD((__int64)v17, 1) )\n{\nj = sub_4101EE(a1, a4, a5);\nif ( !j )\n{\nj = sub_4101EE((__int64)v17, a4, a5);\nif ( !j || j != -14 )\nbreak;\n}\nif ( j != -14 )\nbreak;\nj = sub_40BC10(v17, (int *)a1, 1);\nif ( j )\nbreak;\nj = sub_40BC10((_DWORD *)a1, (int *)a1, 2);\nif ( j )\nbreak;\n}\n}\n}\nelse\n{\ndo\n{\nj = sub_4101EE(a1, a4, a5);\nif ( !j )\nbreak;\nif ( j != -14 )\nbreak;\nj = sub_40BC10((_DWORD *)a1, (int *)a1, 2);\n}\nwhile ( !j );\n}\n}\n}\n}\nsub_40A088((__int64)v17, 0LL, v8, v9, v10, v11, a5, a4);\nreturn j;\n}"
    }
]